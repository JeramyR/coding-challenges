

//title: Tic Tac Toe

//tags: arrays,games

//url: https://edabit.com/challenge/RN3LvGdsfsyruoBtt

//Description:
//Given a tic-tac-toe board, create a function that determines whether X won, O won, or there's a tie.
//The board is represented as a 2-dimensional array. A board does not have to be completely filled. Blank squares are represented with the letter "B". For each board, X begins and O goes second.
//Examples
//whoWon([
//  ["X", "O", "B"],
//  ["B", "X", "O"],
//  ["B", "B", "X"]
//]) ➞ "X"
//
//whoWon([
//  ["X", "O", "X"],
//  ["O", "X", "B"],
//  ["X", "B", "O"]
//]) ➞ "X"
//
//whoWon([
//  ["X", "X", "O"],
//  ["O", "O", "X"],
//  ["X", "X", "O"]
//]) ➞ "Tie"
//Notes
//N/A

//code area
///////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////

//tests:

//Test.assertEquals(whoWon([
//['X', 'O', 'B'], 
//['B', 'X', 'O'],
//['B', 'B', 'X']
//]), "X");
//​
//Test.assertEquals(whoWon([
//['X', 'O', 'X'], 
//['O', 'X', 'B'],
//['X', 'B', 'O']
//]), "X");
//​
//Test.assertEquals(whoWon([
//['X', 'X', 'O'], 
//['O', 'O', 'X'],
//['X', 'X', 'O']
//]), "Tie");
//​
//Test.assertEquals(whoWon([
//['X', 'X', 'B'], 
//['O', 'X', 'X'],
//['O', 'O', 'O']
//]), "O");
//​
//Test.assertEquals(whoWon([

//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////


//title: Casino Security

//tags: games,logic,regex,validation

//url: https://edabit.com/challenge/SimxWM2Tz9jvXqLM3

//Description:
//You're head of security at a casino that has money being stolen from it. You get the data in the form of strings and you have to set off an alarm if a thief is detected.
//If there is no guard between thief and money, return "ALARM!"
//If the money is protected, return "Safe"
//String Components
//x - Empty Space
//T - Thief
//G - Guard
//$ - Money
//Examples
//security("xxxxTTxGxx$xxTxxx") ➞ "ALARM!"
//
//security("xxTxxG$xxxx$xxxx") ➞ "Safe"
//
//security("TTxxxx$xxGxx$Gxxx") ➞ "ALARM!"
//Notes
//Money at the extremes are safe.

//code area
///////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////

//tests:

//Test.assertEquals(security("xxTxxx$xxxTxxxGxxT"), "ALARM!")
//Test.assertEquals(security("xGxx$xxGxxxTTT"), "Safe")
//Test.assertEquals(security("TxGxx$xxx$xxxGxxT"), "Safe")
//Test.assertEquals(security("GxxxTxxGxxTxx$xx$xxTxxG"), "ALARM!")
//Test.assertEquals(security("xxGTxx$xx$xxxxxxG"), "ALARM!")
//Test.assertEquals(security("xxTxxxxxxxx$xGxxxxxxT"), "ALARM!")
//Test.assertEquals(security("xx$xxGxxxx$xxxxxxxxxxT"), "ALARM!")
//Test.assertEquals(security("xxxTxxxxT"), "Safe")
//Test.assertEquals(security("xxGxxxGGG"), "Safe")
//Test.assertEquals(security("x$xx$x$x$xx"), "Safe")

//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////


//title: Math Marking

//tags: arrays,formatting,math,strings

//url: https://edabit.com/challenge/azBrZcE6Fhw2QFn7b

//Description:
//Given an array of math equations (given as strings), return the percentage of correct answers as a string. Round to the nearest whole number.
//Examples
//markMaths(["2+2=4", "3+2=5", "10-3=3", "5+5=10"]) ➞ "75%"
//
//markMaths(["1-2=-2"]), "0%"
//
//markMaths(["2+3=5", "4+4=9", "3-1=2"]) ➞ "67%"
//Notes
//You can expect only addition and subtraction.
//Note how there aren't any spaces in any given equation.

//code area
///////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////

//tests:

//Test.assertEquals(markMaths(["2+2=4", "3+2=5", "10-3=3", "5+5=10"]), "75%")
//Test.assertEquals(markMaths(["2+3=5", "4+4=9", "3-1=2"]), "67%")
//Test.assertEquals(markMaths(["2+1=1", "2-1=2", "1+2=-2", "2-1=0", "1-2=0", "2+1=2", "2-1=1", "1-2=0", "2+1=1", "1+2=-1", "1+2=1", "1+2=-1", "1-2=-2", "1-1=2", "1+2=-1", "1-1=2", "2-1=0", "1-2=-2", "2+1=-2", "1-1=-1", "1-1=1", "1+2=1", "1-1=2"]), "4%")
//Test.assertEquals(markMaths(["1+1=-1", "2+1=-2", "2+1=-2", "1-1=-2", "1-2=1", "1-1=-1", "2-2=-2", "2+2=1", "2+1=-2", "1-2=0", "2+1=-2", "2-1=1", "2+2=-1", "1-2=-1", "1-2=0", "1-2=2"]), "12%")
//Test.assertEquals(markMaths(["1+2=0", "2+2=-2", "1+2=1", "1-1=-2", "2+2=-2", "1+1=-1", "1+2=-1", "1-2=0", "1+1=1", "1-1=1"]), "0%")
//Test.assertEquals(markMaths(["2-2=1", "1-2=-2", "1+1=1", "1+1=-1", "2-2=2", "1-2=-2", "1+1=-1", "2+2=2"]), "0%")
//Test.assertEquals(markMaths(["1-2=1", "1-1=0", "1-1=1", "1-2=1", "1-1=2", "2-2=-2", "1+1=-2", "2+1=-2", "2+1=-1", "2+2=-1", "1-1=1", "1-1=-1", "2-1=2", "1-1=2", "1-1=-2", "2-1=-2", "1-1=-1", "1+1=-2", "1-1=0", "1+2=2", "2+2=0", "1+2=-2", "2-1=2", "1+2=-1", "2+2=-2", "2+2=0", "2+1=0", "1-1=-1", "2-2=2", "1+2=2", "2-1=-1", "2+2=1", "1-1=-1", "2-2=-1", "1-2=2", "1-2=2", "2+2=-1", "2-2=0", "1+1=2", "2+1=0", "1+2=0", "1+1=1", "2+2=-1", "1-2=0", "1-2=-1", "2-1=1"]), "13%")
//Test.assertEquals(markMaths(["2+2=1", "2-1=-2", "1-1=2", "1+2=-1", "2-1=-2", "1+1=1", "2-1=-2", "2+1=1", "2-1=-1", "1-2=2", "2+2=2", "2-1=0", "1-2=1", "2+2=0", "1-2=-1", "2-1=-2", "2-1=2", "2+2=2", "2-1=-1", "2-1=-1", "1-1=2", "1+2=-2", "2-2=0", "2-1=-1", "2-2=-1", "1-1=0", "1-2=-2", "2-2=2", "1+2=-1", "1+2=1", "1-2=-2", "2-1=-2", "1-1=-2", "1+1=-1", "1-2=0", "1-1=0", "1-2=1", "1-1=-2", "1+1=1", "2+2=-2", "2+1=-2", "1+1=2", "1+2=1", "1+2=2", "2-1=2", "2+1=1", "1-2=1", "2+1=-1", "2+2=-1", "2-1=1", "2-1=-2", "2-1=2", "2-1=0", "2-1=1", "1-1=-1"]), "13%")
//Test.assertEquals(markMaths(["1+1=-2", "1+2=1", "2-2=0", "1-1=0", "1-2=-1", "2+2=-1", "1-2=2", "2-1=0", "2+1=-2", "1-2=2", "2+1=0", "2-2=-1"]), "25%")
//Test.assertEquals(markMaths(["1-2=2", "1+1=-2", "1-1=0", "2+1=2", "1+1=1", "2-1=2", "1-1=-2", "2-1=0", "2-2=2", "1+2=1", "1+2=-1", "2+2=2", "1+2=0", "2+2=2", "2+2=-1", "2-1=-2", "2-1=1", "2+1=1", "1+1=-1", "1-1=2", "2-2=0", "1-1=0", "2-1=2", "2-2=0", "2-1=0", "1-2=1", "2+2=1", "1-1=-1", "2+1=0", "2-1=0", "1-1=0", "2-1=-1", "1-2=-2", "2-2=-1", "2-1=2", "1-2=0", "2+1=2", "2-2=0", "2+1=-2", "1+1=-1", "1+1=-2"]), "17%")
//Test.assertEquals(markMaths(["1-2=-2", "1+2=2", "2+1=-2", "1+1=2", "1-2=0", "2+1=-1", "2+1=1", "2+1=0", "1+2=1", "2-1=-2", "2+1=2", "1-1=2", "2-2=-1", "1-2=1", "1-2=0", "2+2=-2", "1-2=-1", "2-2=1", "1+2=2", "2-2=-2", "1+1=0", "2+1=2", "2-2=0", "1+2=-1", "1+1=-1", "1-1=-2", "1+1=1", "2-2=-1", "2+1=0", "1-2=0", "2+2=0", "1-1=2", "1+1=1", "1+2=1", "2+1=-2", "2+2=-2", "1+2=0", "2-2=-2", "2-1=0", "2+2=1", "1-1=2", "2+2=1", "1-1=0", "1-2=-1", "1+2=1", "2-2=0", "1-2=-1", "1+1=2", "2-2=0", "2+2=0", "1-1=-1", "1+2=0", "2-1=1", "2-1=2", "1+2=0", "1-1=0", "2-1=0", "2+1=0", "2-2=1", "1+1=1", "1-1=-2", "1+2=2", "2+2=2", "2+1=0", "2-1=1"]), "18%")
//Test.assertEquals(markMaths(["1-2=-1", "1+1=0", "2+1=-2", "1-1=2", "1-2=-2", "2-1=-1", "1-2=2", "1+2=2", "1+1=2", "2+1=0", "2-1=0", "2-1=2", "2-1=-1", "2-1=-2", "1-1=-1", "1+2=2", "1-1=-1", "2+1=-2", "2+1=0", "2+1=1", "2+1=2", "2-2=1", "2+1=2", "2-2=1", "2+2=2", "1+2=1", "1+1=-1", "2+2=1", "1+1=0", "2+1=-1", "2+2=2", "2+2=-2", "1+2=1", "2+2=1", "1+2=-2", "2-1=-1", "1-1=-1", "2-1=1", "2+1=1", "1-1=1", "2-1=1", "2-2=1", "2-1=1", "1-2=-2", "1-1=0", "1-2=-2", "2+1=-2", "2-1=-2", "1-1=-2", "2-2=2", "1+1=2", "1-1=-2", "2+2=-2", "2+1=1", "1+2=-1", "1+2=2", "2-1=0", "1+1=-2", "1+1=0", "2-2=0", "1-1=0", "2+1=-2", "2-2=0", "1-1=2", "1+2=0"]), "15%")
//Test.assertEquals(markMaths(["1+2=0", "1+1=2", "2-1=-2", "1-1=-1", "1-1=-1", "2-2=0", "2+1=0", "2-2=2", "1-1=1", "1+1=-1", "2+1=1", "2+2=2", "1+1=0", "1-1=0", "2-2=2", "1+1=0", "1-2=1", "1+1=-1", "1-1=1", "1-1=0", "2-2=-2", "2+2=-1", "2-1=-1", "1-2=1", "1-1=-1", "1+2=-1", "2-1=2", "2-1=-1", "2-1=-2", "1+1=-2", "1-2=0", "1+1=1", "1+2=2", "1+2=1", "1-1=-1", "1-2=2", "1+1=1", "1+1=1", "2-1=-2", "2+1=-2", "1+2=2", "2+2=1", "1-2=2", "1+2=2", "2+1=-1"]), "9%")
//Test.assertEquals(markMaths(["2-2=-2", "1-1=2", "1-1=1", "2-1=0", "1+1=-1", "2-1=-1", "1+1=1", "1-1=-1", "1+1=0", "1-1=1", "1-2=0", "2+2=-2", "2+2=-2", "1+1=1", "2-2=0", "2-2=0", "2+2=-1", "1-1=2", "2-2=2", "1+1=1", "1-1=-2", "2+1=-1", "1+1=-1", "2+1=1", "1+1=-1", "1+2=-1", "2-1=0", "1-1=2"]), "7%")
//Test.assertEquals(markMaths(["1-1=2", "2+2=0", "1-1=1", "2+1=1", "2+1=2", "2-1=-1", "1-2=-1", "1-1=-1", "1+2=0", "2-1=-2", "1-1=1", "1-1=2", "2-1=2", "1-1=2", "1+2=-1", "2-1=0", "2+2=-2", "1+2=2", "2+2=-2", "1-2=1", "1-1=-1", "2-1=0", "2-1=-2", "1+1=-1", "1+2=-1", "2-2=1", "1+2=0", "2-2=-1", "2-2=-2", "2+1=1", "2+2=-1", "1+2=-2", "2+2=-1", "2-2=-1", "2+2=1", "2-1=-1", "1-2=1", "1+2=1", "1-2=0", "1-2=1", "1-2=0", "2-2=2", "2+2=1", "2-1=2", "1-2=-1", "1-2=2", "2-1=-1", "2+1=-1", "2-2=1", "1+1=-1", "1+1=-1", "2-2=2", "1+2=-2", "1-1=1", "2+2=2", "2-1=-2", "1+2=2", "1-1=0", "1+1=-1"]), "5%")
//Test.assertEquals(markMaths(["2-2=1", "2+2=2", "1+1=0", "1+1=0", "1-2=-2", "2-1=-2", "1+1=-2", "1+1=-1", "1-2=1", "2-1=1", "2-2=-1", "1-2=-2", "1+2=2", "2-1=-1", "1-1=0", "1+1=1", "1+2=2", "1+2=-2", "2+2=-2", "1+2=0", "1-2=-1", "1+2=-1", "1-1=0", "1+2=1", "1+1=2", "1+1=-1", "1+2=2", "1+1=-2", "1-2=2", "2+2=-2", "2+2=2", "2+2=0", "1-1=0"]), "18%")
//Test.assertEquals(markMaths(["2+2=-1", "2+2=0", "2-2=-1", "2+2=2", "2+1=1", "2-2=-1", "2+2=-2", "2-2=1", "2-2=2", "2-2=-1", "2-1=1", "1-1=2", "2-1=-2", "1+2=1", "2-2=-2", "1+2=2", "1+2=-2", "1-2=-1", "2+1=-1", "1-1=1", "2+2=1", "1-1=1", "1-1=0", "2-1=0", "1-2=1", "1+1=-2", "1-1=-2", "2-2=0", "2+1=0", "1+1=-1", "1+1=-2", "1-2=-2", "1+2=1", "2+1=0", "2-1=0", "2-1=2", "2+2=1", "2-2=-1", "2+1=0", "1+1=-1", "2-2=0", "1-1=1", "2+1=-1", "1+1=2", "1-2=-2", "2-2=1", "2-1=-2", "1+2=2", "2-2=1", "2+1=0", "1+1=-1", "2-1=1"]), "13%")
//Test.assertEquals(markMaths(["2-2=-2", "2+2=-1", "1+1=-2", "1-2=-1", "1-2=-1", "2+2=-2", "1-2=2", "2+1=-1", "1-1=0", "1+2=-1", "2-2=0", "1+1=2", "1+1=1", "2-1=-1", "1+2=0", "2-1=-1", "1+2=-1", "1-2=-2", "1+1=-1", "2-2=2", "1-1=0", "1-1=2", "1-2=1", "1-2=0", "1-2=-2", "2+2=2", "1+2=1", "1+1=-1", "1-1=0", "2-1=1", "2-2=1", "2-2=1", "2+2=1", "2+2=-1", "1-1=2", "1-1=-2", "1-2=2", "1+2=0", "2-2=2", "2+2=-1", "1-2=-2", "2-2=-2", "2+1=1", "1-2=-2", "2-2=0", "2+2=0", "1-1=2", "2-2=-2", "2-1=-2", "2+1=2", "2-1=-1", "1-1=0", "1-2=-2", "2-1=0", "2-1=0", "1-1=2", "1+1=-1", "1-2=1", "1-1=-1", "1-1=-2", "2+2=-2", "2+2=0", "1+2=1", "1+2=0", "2+2=0", "1-1=-2", "2-2=-1", "2+2=1", "1+1=0", "2-1=2"]), "14%")
//Test.assertEquals(markMaths(["1-1=2", "2-1=2", "2-2=-2", "1-1=-2", "2-2=1", "2+1=-1", "1+2=-1", "1+1=0", "2-2=-1", "1-1=-2", "1-2=-1", "1+2=-2", "2-1=-1", "2-1=0", "2+1=2", "1-1=-1", "2-1=-2", "2-1=1", "2-2=-1", "1-2=0", "1+2=-1", "2+1=2"]), "9%")
//Test.assertEquals(markMaths(["1-1=-1", "1-2=-2", "1-2=0", "2-2=-1", "2+1=0", "2+2=0", "2+1=-1", "2-1=0", "1+1=0", "2-1=2", "2-1=2", "1-1=-2", "2-1=-2", "2+2=-1", "2+1=2", "2-2=-1", "2+2=-2", "2+1=-1", "2+2=2", "2-1=2", "1+2=1", "2+1=1", "1+2=2", "1+1=2", "2+1=-2", "1-1=1", "2+2=0"]), "4%")
//Test.assertEquals(markMaths(["1-1=2", "1-2=-1", "1-1=1", "1+2=-1", "1-2=-1", "2+1=1", "2-1=-1", "1-1=-2", "2+1=-2", "2-1=1", "2+2=1", "2-1=-2", "2-2=1"]), "23%")
//Test.assertEquals(markMaths(["1+2=2", "1+2=1", "1-1=2", "1+1=-2", "2+1=-1", "2-1=0", "2-1=1", "1+1=2", "2-2=1", "2-1=0", "2+1=-1", "2+2=-2", "2-2=2", "2-2=0", "1+1=1", "1-1=-2", "1-2=1", "2+2=-1", "2+2=-2", "2-2=2", "1-2=2", "2+1=0", "2-1=-1", "1-2=0", "2-2=0", "1+2=-1", "1-2=2", "1+1=1", "2-1=-1"]), "14%")
//Test.assertEquals(markMaths(["2-2=2", "2+2=-1", "2-1=0", "1+2=2", "1+2=2", "2+1=2", "2+2=2", "2+2=2", "1-1=1", "2-2=0", "1+1=1", "2-2=1", "2+2=2", "2-2=1", "2-2=-2", "2-1=-1", "1-2=1", "1-2=1", "1-2=0", "2+1=2", "2-1=0", "2+1=-1", "2+1=-1", "2-2=2", "1+2=0", "2-2=2", "2-1=-2", "2+2=0", "2-2=-1", "2-2=0", "2+1=-2", "1+2=2", "1-2=-1", "1+2=0"]), "9%")
//Test.assertEquals(markMaths(["1+1=2", "1-1=1", "1-2=-1", "2-1=-1", "2+1=2", "2-1=-2", "1-1=-1", "2+1=0", "2+1=1", "2+2=1", "2+2=1", "2-1=-1", "2+2=-2", "2-1=1", "2+2=-2", "1-1=2", "2-1=1", "1-2=-1", "1+1=-2", "2+1=0", "2-1=1", "2+2=-2", "1+2=2", "1-1=1", "1-1=0", "1+1=-2", "2+1=-2", "2-2=-1", "2+1=-2", "2-2=2", "1+1=0", "2-2=-1", "1-1=0", "2-1=2", "2-1=-2", "1+1=-1", "2-1=2", "2+1=-2", "2+2=0", "1-2=1", "1+1=1", "1+2=1", "1+1=0", "2+2=0", "1+2=-2", "1-2=-1", "2-1=-1", "1+2=1", "2-2=-1", "2-2=-2", "2+2=-2", "1+1=-2", "1+1=-1", "1+1=0", "2-1=1", "2-1=1", "1+2=-1", "2+2=2", "2-1=-2", "2-2=-1", "1+2=-1", "1-2=2"]), "18%")
//Test.assertEquals(markMaths(["1+2=2", "1-2=0", "2+1=1", "2+2=-2", "2-2=2", "1-2=2"]), "0%")

