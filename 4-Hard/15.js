

//title: Temperature Converter

//tags: algorithms,control_flow,math,numbers

//url: https://edabit.com/challenge/9CNJtMXaw2K5NwMLJ

//Description:
//Create a function that converts Celsius to Fahrenheit and vice versa.
//Examples
//convert("35°C") ➞ "95°F"
//
//convert("19°F") ➞ "-7°C"
//
//convert("33") ➞ "Error"
//Notes
//Round to the nearest integer.
//If the input is incorrect, return "Error".
//For the formulae to convert back and forth, check the Resources tab.

//code area
///////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////

//tests:

//Test.assertEquals(convert('35°C'), '95°F')
//Test.assertEquals(convert('18°C'), '64°F')
//Test.assertEquals(convert('0°F'), '-18°C')
//Test.assertEquals(convert('100°C'), '212°F')
//Test.assertEquals(convert('69°F'), '21°C')
//Test.assertEquals(convert('159°C'), '318°F')
//Test.assertEquals(convert('-40°C'), '-40°F')
//Test.assertEquals(convert('-40°F'), '-40°C')
//Test.assertEquals(convert('16°C'), '61°F')
//Test.assertEquals(convert('500°C'), '932°F')
//Test.assertEquals(convert('33'), 'Error')
//Test.assertEquals(convert('19°F'), '-7°C')
//Test.assertEquals(convert('85°C'), '185°F')
//Test.assertEquals(convert('0°C'), '32°F')
//Test.assertEquals(convert('1777°F'), '969°C')
//Test.assertEquals(convert('-90°C'), '-130°F')
//Test.assertEquals(convert('16°F'), '-9°C')
//Test.assertEquals(convert('180°C'), '356°F')
//Test.assertEquals(convert('7K'), 'Error')
//Test.assertEquals(convert('100°F'), '38°C')

//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////


//title: Primorial of a Number

//tags: interview,logic,math,numbers

//url: https://edabit.com/challenge/NavpMQj44kMQ6bXo7

//Description:
//In mathematics, primorial, denoted by “#”, is a function from natural numbers to natural numbers similar to the factorial function, but rather than successively multiplying positive integers, the function only multiplies prime numbers.
//Create a function that takes an integer n and returns its primorial.
//Examples
//primorial(1) ➞ 2
//// First prime number = 2
//
//primorial(2) ➞ 6
//// Product of first two prime numbers = 2*3 = 6
//
//primorial(6) ➞ 30030
//Notes
//n >= 1.

//code area
///////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////

//tests:

//Test.assertEquals(primorial(1), 2)
//Test.assertEquals(primorial(2), 6)
//Test.assertEquals(primorial(3), 30)
//Test.assertEquals(primorial(4), 210)
//Test.assertEquals(primorial(5), 2310)
//Test.assertEquals(primorial(8), 9699690)
//Test.assertEquals(primorial(9), 223092870)
//​
//// Mubashir

//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////


//title: Harvest Festival

//tags: conditions,language_fundamentals,strings

//url: https://edabit.com/challenge/CmWQTvvkXSeaNGdDy

//Description:
//You have cultivated a plant, and after three long months, the time has come to reap the fruits (or the flowers, in this case) of your hard work. During the growth phase, you added water and fertilizer, and kept a constant temperature. It's time to check how much the plant has grown!
//A plant is represented horizontally, from the base to the left, to the end to the right:
//---@---@---@
//The stem is made of hyphens, and the flowers are represented by symbols. A plant always starts with the stem, and always ends with flowers.
//The four given parameters are:
//seed (string) determines the type of flowers generated by the plant.
//water (integer) each unit of water extends the portion of stem between the flowers, and gives the total number of segments (stem + flowers) of the plant.
//fert (integer) each unit of fertilizer increases the amount of flowers, grouped in clusters.
//temp (integer) if the temperature recorded is between 20°C and 30°C (bounds included) the plant grows normally, otherwise all the flowers die, except for a single survivor at the end of the stem.
//Given the above parameters, implement a function that returns a string representing the plant (see the examples below for a better visualization).
//Examples
//plant("@", 3, 3, 25) ➞ "---@@@---@@@---@@@"
//// Water gives the length of the stem portions between flowers.
//// Water gives the total number of segments.
//// Fertilizer gives the length of flowers clusters.
//// In this case the temperature is in the acceptable range 20°C | 30°C
//
//plant("#", 1, 5, 30) ➞ "-#####"
//
//plant("&", 5, 1, 20) ➞ "-----&-----&-----&-----&-----&"
//
//plant("§", 3, 3, 15) ➞ "---------§"
//// The temperature out of range make all flowers die, except the last one.
//// The stem is not affected by temperature.
//Notes
//All given cases will have valid parameters for water and fert, you have to only check that temp is in the "safe" range (20°C|30°C).

//code area
///////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////

//tests:

//Test.assertEquals(plant("@", 3, 3, 25), "---@@@---@@@---@@@", "Example #1")
//Test.assertEquals(plant("#", 1, 5, 30), "-#####", "Example #2")
//Test.assertEquals(plant("§", 5, 1, 20), "-----§-----§-----§-----§-----§", "Example #3")
//Test.assertEquals(plant("&", 3, 3, 15), "---------&", "Example #4")
//Test.assertEquals(plant("🍁", 2, 6, 28), "--🍁🍁🍁🍁🍁🍁--🍁🍁🍁🍁🍁🍁")
//Test.assertEquals(plant("🍃", 4, 2, 22), "----🍃🍃----🍃🍃----🍃🍃----🍃🍃")
//Test.assertEquals(plant("€", 4, 10, 38), "----------------€")

