

//title: Pizza Points™ 🍕

//tags: games,objects

//url: https://edabit.com/challenge/raWPf5nZyRKEEH6ZQ

//Description:
//
//Google is launching a network of autonomous pizza delivery drones and wants you to create a flexible rewards system (Pizza Points™) that can be tweaked in the future. The rules are simple: if a customer has made at least N orders of at least Y price, they get a FREE pizza!
//Create a function that takes an object of customers, a minimum number of orders and a minimum order price. Return an array of customers that are eligible for a free pizza.
//Examples
// let customersObj = {
//    "Batman": [22, 30, 11, 17, 15, 52, 27, 12],
//    "Spider-Man": [5, 17, 30, 33, 40, 22, 26, 10, 11, 45]
//  }
//
//  pizzaPoints(customersObj, 5, 20) ➞ ["Spider-Man"]
//
//  pizzaPoints(customersObj, 3, 10) ➞ ["Batman", "Spider-Man"]
//
//  pizzaPoints(customersObj, 5, 100) ➞ []
//Notes
//⚠️Sort the returned array of customer names in alphabetical order.

//code area
///////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////

//tests:

//let obj1 = {
//  'Batman': [22, 30, 11, 17, 15, 52, 27, 12],
//  'Spider-Man': [5, 17, 30, 33, 40, 22, 26, 10, 11, 45]
//}
//​
//let obj2 = {
//  'Captain America': [10, 10, 54, 14, 51, 33, 42, 73, 66, 33, 55, 42, 47],
//  'Iron Man': [30, 56, 38, 14, 17],
//  'Hulk': [53, 25, 13, 7, 61, 16, 17, 29, 64, 8],
//  'Superman': [27, 28]
//}
//​
//let obj3 = {
//  'Zorro': [13, 53, 10, 51],
//  'Wolverine': [16],
//  'Elon Musk': [26, 61, 23, 61, 39, 50, 53, 54, 45, 46, 42, 49, 18, 75, 11, 73, 42, 61, 15, 60, 70, 67, 8, 9, 63, 55, 55, 35, 24, 59, 13, 49, 46, 26, 7, 8, 8, 34, 73, 60, 27, 28, 28, 48, 10]
//}
//​
//Test.assertSimilar(pizzaPoints(obj1, 5, 20), ["Spider-Man"]);
//Test.assertSimilar(pizzaPoints(obj2, 1, 5), ["Captain America", "Hulk", "Iron Man", "Superman"]);
//Test.assertSimilar(pizzaPoints(obj3, 7, 15), ["Elon Musk"]);
//Test.assertSimilar(pizzaPoints(obj1, 10, 5), ["Spider-Man"]);
//Test.assertSimilar(pizzaPoints(obj2, 2, 35), ["Captain America", "Hulk", "Iron Man"]);
//Test.assertSimilar(pizzaPoints(obj3, 3, 25), ["Elon Musk"]);
//Test.assertSimilar(pizzaPoints(obj3, 4, 12), ["Elon Musk"]);

//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////


//title: Tweaking Letters

//tags: arrays,strings

//url: https://edabit.com/challenge/9bLHfb3wB8QCvtqWK

//Description:
//Create a function that tweaks letters by one forward (+1) or backwards (-1) according to an array.
//Examples
//tweakLetters("apple", [0, 1, -1, 0, -1]) ➞ "aqold"
//// "p" + 1 => "q"; "p" - 1 => "o"; "e" - 1 => "d"
//
//tweakLetters("many", [0, 0, 0, -1]) ➞ "manx"
//
//tweakLetters("rhino", [1, 1, 1, 1, 1]) ➞ "sijop"
//Notes
//Don't worry about capital letters.

//code area
///////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////

//tests:

//Test.assertEquals(tweakLetters("apple", [0, 1, -1, 0, -1]), "aqold")
//Test.assertEquals(tweakLetters("many", [0, 0, 0, -1]), "manx")
//Test.assertEquals(tweakLetters("rhino", [1, 1, 1, 1, 1]), "sijop")
//Test.assertEquals(tweakLetters('xyz', [1, 1, 1]), 'yza')
//Test.assertEquals(tweakLetters('abc', [-1, -1, -1]), 'zab')

//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////


//title: Find the Difference

//tags: algorithms,strings

//url: https://edabit.com/challenge/nLiY7c7S6aPwpB989

//Description:
//You are given two strings s and t.
//String t is generated by randomly shuffling string s and then adding one more letter at a random position.
//Return the letter that was added to t.
//Examples
//findTheDifference("", "e") ➞ "t"
//
//findTheDifference("abcd", "abcde") ➞ "e"
//
//findTheDifference("rt", "rst") ➞ "s"
//
//findTheDifference("gjklmn", "ghjklmn"") ➞ "h"
//
//findTheDifference("ae", "aea") ➞ "a"
//Notes
//N/A

//code area
///////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////

//tests:

//const deepCopy = x => {
//  let z, k, v
//  if (typeof x !== "object" || x === null) return x
//  z = Array.isArray(x) ? [] : {}
//  for (k in x) {
//    v = x[k]
//    z[k] = deepCopy(v)
//  }
//  return z
//}
//​
//const clone = x => x.map(e => Array.isArray(e) ? clone(e) : e)
//​
//const shuffle = r => {
//  for (let i = r.length - 1, t, k; i > 0; i--) {
//    [t, k] = [r[i], Math.floor(Math.random() * (i + 1))]
//    r[i] = r[k]
//    r[k] = t
//  }
//}
//​
//const randInt = (n, x) => Math.floor(Math.random() * (x-n+1)) + n
//​
//let [actualParam, expectedParam] = [
//  [

