

//title: Add the Values of the Symbols in a Matrix

//tags: functional_programming,math,numbers,strings

//url: https://edabit.com/challenge/sE7z8FkWycJHrAvu9

//Description:
//Write a function that takes an array of arrays and returns the value of all of the symbols in it, where each symbol adds or takes something from the total score. Symbol values:
//# = 5
//O = 3
//X = 1
//! = -1
//!! = -3
//!!! = -5
//An array of arrays containing 2 #s, a O, and a !!! would equal (0 + 5 + 5 + 3 - 5) 8.
//If the final score is negative, return 0 (e.g. 3 #s, 3 !!s, 2 !!!s and a X would be (0 + 5 + 5 + 5 - 3 - 3 - 3 - 5 - 5 + 1) -3, so return 0.
//Examples
//checkScore([
//  ["#", "!"],
//  ["!!", "X"]
//]) ➞ 2
//
//checkScore([
//  ["!!!", "O", "!"],
//  ["X", "#", "!!!"],
//  ["!!", "X", "O"]
//]) ➞ 0
//
//checkScore([
//  ["#", "O", "#", "!!", "X", "!!", "#", "O", "O", "!!", "#", "X", "#", "O"],
//  ["!!!", "!!!", "!!", "!!", "!", "!", "X", "!", "!!!", "O", "!", "!!!", "X", "#"],
//  ["#", "X", "#", "!!!", "!", "!!", "#", "#", "!!", "X", "!!", "!!!", "X", "O"],
//  ["!!", "X", "!!", "!!", "!!!", "#", "O", "O", "!!!", "#", "O", "O", "#", "!!"],
//  ["O", "X", "#", "!", "!", "X", "!!!", "O", "!!!", "!!", "O", "!", "O", "X"],
//  ["!!", "!!!", "X", "!!!", "!!", "!!", "!!!", "X", "O", "!", "#", "!!", "!!", "!!!"],
//  ["!!", "!!", "#", "O", "!", "!!", "!", "!!!", "#", "O", "#", "!", "#", "!!"],
//  ["X", "X", "O", "X", "!!!", "#", "!!!", "!!!", "X", "X", "X", "!", "#", "!!"],
//  ["O", "!!!", "!", "O", "#", "!", "!", "#", "X", "X", "#", "O", "!!", "!"],
//  ["X", "!", "!!", "#", "#", "X", "!!", "O", "!!", "X", "X", "!!", "#", "X"],
//  ["!", "!!", "!!", "O", "!!", "!!", "#", "#", "!", "!!!", "O", "!", "#", "#"],
//  ["!", "!!!", "!!", "X", "!!", "!!", "#", "!!!", "O", "!!", "!!!", "!", "!", "!"],
//  ["!!!", "!!!", "!!", "O", "!", "!", "!!!", "!!!", "!!", "!!", "X", "!", "#", "#"],
//  ["O", "O", "#", "O", "#", "!", "!!!", "X", "X", "O", "!", "!!!", "X", "O"]
//]) ➞ 12
//Notes
//Strings in the arrays will only be #, O, X, !, !! and !!!.

//code area
///////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////

//tests:

//Test.assertEquals(checkScore
//Test.assertEquals(checkScore([['!', '#', '#', 'O', '#', '!', 'X', '!!', '!!!', '!!', 'O', '!!', '!!!', '!', '!'], ['#', 'O', '!!', '!!', 'X', 'X', '!!!', '!', '!!!', 'X', '!!!', '!!!', '#', '#', '!!!'], ['X', '!!!', '!!!', 'O', '!!!', '!!', '!', '#', 'O', '!', '!!', '!!', '!', 'O', '!'], ['#', '!!', 'O', '#', '!', 'X', 'X', 'X', 'X', 'X', 'O', 'O', '!!', '!!', 'X'], ['O', 'O', '!', '!', '!!', '!!!', 'O', 'O', '!', 'O', '!!', '!!', '!!', '!!', '!!!'], ['!!!', 'O', 'O', '!!!', '!', 'X', '!!', '#', '!!', '!!!', 'X', '!!', '!!!', 'X', '!'], ['!!!', '!!', '!', '#', '#', '!!', '!', 'X', 'O', '!!', 'X', '!!', '!!', '#', '!!'], ['X', '!!!', '!!', 'O', '!!!', 'O', '!', '!!', 'X', '#', '!', '!!!', '!!', 'O', '#'], ['O', 'O', '!', 'X', 'O', '!', 'O', 'X', '#', '!!!', '#', '!!', '!', 'O', 'O'], ['#', '!!', 'O', '!!', '!', '#', '!', 'O', '!!', 'X', 'O', '!!!', '!!', '!', '!!!'], ['!!', '!!!', 'O', '!!', 'O', '!', '!!', '!', '!!', '!!!', 'X', '!!', 'O', '!!!', '!!'], ['!!!', '#', '!!', '#', '!!', '!!!', '#', 'X', '#', 'X', 'X', '!!', '!', '!!!', 'X'], ['!', 'X', 'X', '!', '!!!', '!', '!', 'O', '!', 'X', '!!', '!!!', '!!!', '!', '!!'], ['!!!', '!', '!', '!', '!', '!', '!!', 'X', '!!!', 'O', '!!!', '!!!', '!', '!!!', '#'], ['!!!', '#', '!', 'O', '!', '!!', '!', '!', '!!!', '!!!', 'O', '!!!', '!', '!!', '!']]), 0)
//Test.assertEquals(checkScore
//Test.assertEquals(checkScore([['X', '!!!', '#', '#', '!', '#', '!'], ['!', '!', 'X', 'X', '#', 'O', '!!!'], ['#', '!', '!!!', 'X', 'O', '!!!', '#'], ['!!!', 'O', '#', 'O', '#', 'O', '!!!'], ['!!!', '!!', '!', 'X', '#', '!!!', '!!!'], ['O', '!!', '!!!', '!!!', 'X', '#', 'X'], ['O', 'X', '!', '!!!', '!!!', '#', 'X']]), 7)
//Test.assertEquals(checkScore
//Test.assertEquals(checkScore([['O', '!!!', '!', '!', '!!!', '!', '#', '!!'], ['!!', '#', 'O', '!!', 'X', '#', '!!!', '!!'], ['!!!', '#', '!!!', '!!!', '!!!', '!!!', '!!!', '!!'], ['!', '!!', 'X', 'O', '!', 'O', '#', '#'], ['#', '!!!', '#', 'O', 'X', '!!', 'X', '#'], ['!!!', '!!', '#', 'O', '!!!', 'X', '!!', '!'], ['#', '!!!', 'O', 'X', '#', '#', '!!!', '!!!'], ['!!', '#', '!!!', '!', 'X', '!!!', '!', 'O']]), 0)
//Test.assertEquals(checkScore
//Test.assertEquals(checkScore
//Test.assertEquals(checkScore
//Test.assertEquals(checkScore([['!!!', '!!', 'X', '!!', '#', '!', 'O'], ['!!', '!!!', '!!!', 'O', '!!', '!!', '!'], ['!!!', 'O', '!!!', '!', '!!!', '!!', 'X'], ['!', '!!', '!', '!!', '!!!', 'X', '#'], ['#', '!!', '!!!', 'X', 'O', '#', 'X'], ['X', 'X', '!', 'X', '!!!', 'X', 'O'], ['O', '!', '!', '!!!', '#', 'X', 'O']]), 0)
//Test.assertEquals(checkScore([['!!', '!', '!!!', '!!!', '!!', '!', 'X'], ['#', '!!', '!!', '#', '#', '!', '!!!'], ['X', 'O', 'X', '!', '!', '!', 'X'], ['!!', 'X', '!!', '!', 'O', '!', '#'], ['!', 'X', '!', 'O', 'O', '#', 'O'], ['X', '!!!', 'O', 'X', 'X', '#', '!'], ['!', '!', '#', '!!!', 'O', '#', '!']]), 13)
//Test.assertEquals(checkScore
//Test.assertEquals(checkScore
//Test.assertEquals(checkScore([['O', '#', 'X', 'X', 'O', '!!!', '#', 'X', 'O', '!!!', '!', '!!', 'X', 'X', 'O', 'X', '!!'], ['O', 'O', 'O', '!', '!!', 'O', 'X', '#', 'O', 'O', '!', '#', '!!', '!!!', '!', '!', 'X'], ['X', 'O', '#', '!!!', '#', '!', '!!!', '!!', '!!', '!', 'O', '!!!', '!', '!', 'X', 'X', 'O'], ['O', '!', '#', '!!!', '!!!', '#', 'X', 'O', '!!!', '!!!', '!!!', 'O', '!', '!!', '#', '#', 'O'], ['!', '!!!', '!!', '#', '!!', '!', '!!!', '!', 'O', '!!', 'X', 'X', '!', '#', 'O', 'X', '#'], ['X', '!', '#', '!!!', '!', '!!!', 'O', 'X', 'X', '!!', '!', 'O', 'O', 'X', 'O', 'X', '!!!'], ['#', 'X', 'X', 'O', '!', '#', '!!!', '#', '#', '!!!', '!!!', '!', '!!', '!', '!!', '!!', '!!!'], ['!!!', '#', 'X', '!!!', '!!!', 'O', '!', 'O', 'O', 'X', 'O', 'O', 'O', '!!', 'X', '!', 'X'], ['!', 'X', 'X', '!!!', 'O', '!', '!', '!', '!!', 'O', '!!', '!!!', '#', '#', '!!', '!!', '!'], ['!', '!!', 'O', 'X', '!!!', 'X', 'X', '!!!', '!!!', 'X', '!', 'O', 'O', '!!', '!!', '#', 'O'], ['!!', '#', 'X', 'X', '#', '#', 'O', '!', 'O', '!!!', '!!', '!', '!!!', '!', '!', '!!!', '!'], ['X', '!', '!!', '!!', 'O', '!!!', '!!!', '!!!', 'X', '!!', '!!', '!!', '#', 'X', 'X', '!', 'X'], ['!!!', '!', 'X', 'X', '#', 'O', '!', '!!', '#', '!!', '!', '!!', '!', '!!', 'O', 'X', '!!!'], ['#', '!', '!!', '#', 'O', '!', '!', '!', 'X', '!', '!', 'O', 'X', '!', 'X', 'X', '!'], ['#', 'X', '!!!', '!!', 'O', '#', '#', '!!!', '!!!', '!!!', 'O', 'X', '!!', '!!', '!!!', '!!', 'X'], ['!!', 'X', '!!', 'X', 'O', '!', '!!!', 'O', '!!', '!', 'X', '!', '!', 'O', 'X', 'O', '#'], ['!!', '#', 'X', 'X', 'X', 'O', 'X', '!!', '!!!', '!', '!!!', 'X', '!!!', '!!', 'X', 'X', '!!']]), 0)
//Test.assertEquals(checkScore

//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////


//title: How Many Days Until 2021?

//tags: dates

//url: https://edabit.com/challenge/ztPMg7FBJbeRYTnag

//Description:
//Given a date, return how many days date is away from 2021 (end date not included). date will be in mm/dd/yyyy format.
//Examples
//daysUntil2021("12/28/2020") ➞ "3 days"
//
//daysUntil2021("1/1/2020") ➞ "366 days"
//
//daysUntil2021("2/28/2020") ➞ "308 days"
//Notes
//All given dates will be in the year 2020.

//code area
///////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////

//tests:

//Test.assertEquals(daysUntil2021("12/29/2020"), "3 days")
//Test.assertEquals(daysUntil2021("1/1/2020"), "366 days")
//Test.assertEquals(daysUntil2021("2/28/2020"), "308 days")
//Test.assertEquals(daysUntil2021("6/30/2020"), "185 days")
//Test.assertEquals(daysUntil2021("10/22/2020"), "71 days")
//Test.assertEquals(daysUntil2021("12/31/2020"), "1 day")

//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////


//title: Integral of a Function

//tags: math,numbers

//url: https://edabit.com/challenge/yoGc8x3yk36iaBQeW

//Description:
//Create a function that takes numbers b, m, and n as arguments and returns the definite integral of the function f(x)=(b+1)*x^b with respect to x from x=m to x=n, where b, m, and n are constants.
//Examples
//integral(0, 2, 5) ➞ 3
//
//integral(2, 4, 7) ➞ 279
//
//integral(5, 9, 3) ➞ -530712
//Notes
//^ in the context of this challenge means "to the power of", also known as the "exponent" operator.
//Assume that b will be an integer greater than or equal to 0.
//m and n can be any integer, both positive and negative.

//code area
///////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////

//tests:

//Test.assertEquals(integral(0, 2, 5), 3)
//Test.assertEquals(integral(2, 4, 7), 279)
//Test.assertEquals(integral(5, 9, 3), -530712)
//Test.assertEquals(integral(10, 2, -4), -4196352)
//Test.assertEquals(integral(7, 2, 2), 0)

