

//title: Collatz Calculator

//tags: math,numbers

//url: https://edabit.com/challenge/PTmrkAiczm7KxSAJi

//Description:
//A Collatz sequence is generated by repeatedly applying the following rules to an integer and then to each resulting integer in turn:
//If even: divide by 2.
//If odd: multiply by 3, then add 1.
//The Collatz conjecture states that, for any initial positive integer, you will eventually reach the number 1.
//Write a function that, for an initial positive integer n, returns an array containing 2 values:
//The number of times the Collatz rule has to be applied until you reach 1.
//The maximum number reached in the process.
//Examples
//collatz(17) ➞ [12, 52]
//// Because 17 – 52 – 26 – 13 – 40 – 20 – 10 – 5 – 16 – 8 – 4 – 2 – 1
//// takes 12 steps and 52 is the highest number reached.
//
//collatz(6) ➞ [8, 16]
//
//collatz(21) ➞ [7, 64]
//Notes
//N/A

//code area
///////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////

//tests:

//Test.assertSimilar(collatz(1), [0, 1])
//Test.assertSimilar(collatz(3), [7, 16])
//Test.assertSimilar(collatz(9), [19, 52])
//Test.assertSimilar(collatz(27), [111, 9232])
//Test.assertSimilar(collatz(81), [22, 244])

//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////


//title: Sort by Length

//tags: arrays,language_fundamentals,sorting,strings

//url: https://edabit.com/challenge/TvmgpWqYXLk7tSDoc

//Description:
//Create a function that takes a string and returns a string ordered by the length of the words. From shortest to longest word. If there are words with the same amount of letters, order them alphabetically.
//Examples
//sortByLength("Hello my friend") ➞ "my Hello friend"
//
//sortByLength("Have a wonderful day") ➞ "a day Have wonderful"
//
//sortByLenght("My son loves pineapples") ➞ "My son loves pineapples"
//Notes
//Punctuation (periods, commas, etc) belongs to the word in front of it.

//code area
///////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////

//tests:

//Test.assertEquals(sortByLength("Hello my friend"), "my Hello friend")
//Test.assertEquals(sortByLength("Three can keep a secret, if two of them are dead"), "a if of are can two dead keep them Three secret,")
//Test.assertEquals(sortByLength("To be or not to be, that is the question."), "be is or To to be, not the that question.")
//Test.assertEquals(sortByLength("I have a dream"), "a I have dream")
//Test.assertEquals(sortByLength("This is the end"), "is end the This")

//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////


//title: ASCII Capitals

//tags: formatting,math,numbers

//url: https://edabit.com/challenge/qfFpvDpeKb9f68x64

//Description:
//Each character in the English Alphabet has an ASCII Char Code.
//Create a function that converts any word in a given sentence to upper case if the sum of the ASCII codes of the letters in the word is greater than the global average for the sentence. The global average of a sentence is the sum of all the word values divided by the number of words.
//For example:
//Word	Tell	me	the	time
//Sum	401	210	321	431
//Since on average, a word in this sentence has a char code sum of 340.75, "Tell" & "time" would be returned capitalised: "TELL me the TIME"
//Examples
//averageASCII("Tell me the time") ➞ "TELL me the TIME"
//// Global Average for char code sum of a word is 340.75
//
//averageASCII("To be or not to be") ➞ "To be or NOT to be"
//// Global Average for char code sum of a word is 230.33
//
//averageASCII("Edabit helps you learn in bitesize chunks") ➞ "EDABIT HELPS you learn in BITESIZE CHUNKS"
//// Global Average for char code sum of a word is 533.43
//Notes
//Do not count whitespace as part of a word.
//There will be no punctuation/special characters in the tests.
//If a word does not meet the capitalisation citeria, don't fully lowercase it ⁠— leave it how it is (i.e. the first words of a sentence should not be fully lowercased if they don't meet the criteria).
//The char code of a capital letter will be different than its lowercase counterpart.
//When you find the global average, it may help to round it to 2 decimal places, then compare against it.

//code area
///////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////

//tests:

//Test.assertEquals(averageASCII("Edabit helps you learn in bitesize chunks"), "EDABIT HELPS you learn in BITESIZE CHUNKS")
//Test.assertEquals(averageASCII("To be or not to be"), "To be or NOT to be")
//Test.assertEquals(averageASCII("What you egg"), "WHAT you egg")
//Test.assertEquals(averageASCII("Made by Harith Shah"), "Made by HARITH Shah")
//Test.assertEquals(averageASCII("Boom"), "Boom")
//Test.assertEquals(averageASCII("The most addictive way to learn"), "The most ADDICTIVE way to LEARN")

