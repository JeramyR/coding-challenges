

//title: Evaluate the Group of Parentheses

//tags: algorithms,logic,regex,strings

//url: https://edabit.com/challenge/nntT8D5xdawH464Fo

//Description:
//The function is given a balanced parentheses string. Each open "(" has corresponding closed ")". Compute the total score based on the following rules:
//Substring s = "()" has score 1,
//Substring "s1s2" has total score as score of "s1" + score of "s2",
//Substring "(s)" has total score as 2 * score of "s".
//Calculate the total score of the given expression and return it as integer.
//Examples
//evalParentheses("()") ➞ 1
//// 1
//
//evalParentheses("(())") ➞ 2
//// 2 * 1
//
//evalParentheses("()()") ➞ 2
//// 1 + 1
//
//evalParentheses("((())())") ➞ 6
//// 2 * (2 * 1 + 1)
//
//evalParentheses("(()(()))") ➞ 6
//// 2 * (1 + 2 * 1)
//
//evalParentheses("()(())") ➞ 3
//// 1 + 2 * 1
//
//evalParentheses("()((()))") ➞ 5
//// 1 + 2 * 2 * 1
//Notes
//N/A

//code area
///////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////

//tests:

////Evgeny SH
//Test.assertEquals(evalParentheses("()"), 1)
//Test.assertEquals(evalParentheses("(())"), 2)
//Test.assertEquals(evalParentheses("()()"), 2)
//Test.assertEquals(evalParentheses("((())())"), 6)
//Test.assertEquals(evalParentheses("(()(()))"), 6)
//Test.assertEquals(evalParentheses("()(())"), 3)
//Test.assertEquals(evalParentheses("()((()))"), 5)
//Test.assertEquals(evalParentheses("(()(())(())())(())((()(())(())())(()))"), 42)
//Test.assertEquals(evalParentheses("(((())()((()))(())))(((())))(()())((((())()((()))(())))(((())))(()()))"), 144)
//Test.assertEquals(evalParentheses("((())()(())(())())(((())()(())(())(())(())))((())(())(())())(((())(())(())(())))(()(())()())(((())()(())(())())(((())()(())(())(())(())))((())(())(())())(((())(())(())(())))(()(())()()))"), 348)
//Test.assertEquals(evalParentheses("(((()()(())(())((())))))(((()))((()))())(((((()))()((())))))(((())((()))(())))((()(())))(((((()()(())(())((())))))(((()))((()))())(((((()))()((())))))(((())((()))(())))((()(())))))"), 1070)
//Test.assertEquals(evalParentheses("(((((())))))(((())((()))((()))(())((()))(())((()))(())))((())(())((()))())((())(())()((()))()((()))())((((()))()((()))(())((()))((()))(())))(((((()))((())))))(((()()(())(())((())))))((((((((())))))(((())((()))((()))(())((()))(())((()))(())))((())(())((()))())((())(())()((()))()((()))())((((()))()((()))(())((()))((()))(())))(((((()))((())))))(((()()(())(())((()))))))))"), 3636)
//Test.assertEquals(evalParentheses("((((())(())(((())))((())))))(((((()))()()(())((())))))((((())(((())))((()))(())((()))((()))(())((())))))(((((((())(())(((())))((())))))(((((()))()()(())((())))))((((())(((())))((()))(())((()))((()))(())((()))))))))"), 4176)
//Test.assertEquals(evalParentheses
//Test.assertEquals(evalParentheses
//Test.assertEquals(evalParentheses
//Test.assertEquals(evalParentheses("((()(((())))(((((())))))(((())))((((()))))(((((())))))(((())))(())((((()))))(())((((()))))(((((())))))(())))(((((((()))))(())(())((()))((((()))))((((()))))((())))))((((((((((()))))((()))(((((())))))))))))((((((()))))(((())))((((()))))(())(())(())()(((((())))))(((((())))))((()))(((())))((()))(())(())))((((((((())))((()))(())((()))((()))(((())))((((()))))((((()))))(((((())))))(((())))(((((())))))((((())))))))))((((())))()((((()))))(())((()))(((((())))))(((())))((((()))))(((())))(())(((())))((()))((((()))))((((()))))((((()))))(((((())))))((()))((((()))))()(())())(((((((((()))))()()(())(((((())))))()(())(((((())))))(())()(((())))((((()))))(())(())((((()))))((((())))))))))((((()))((((()))))(((())))(())(())(((((())))))(())(((())))()((()))((((()))))(())((((()))))(((())))(((())))(((())))()(((())))((()))()(((())))(())))(((((((()))((()))((((()))))((()))(((((())))))(((((())))))((()))(())((((()))))(((((())))))(())((((()))))((((()))))()((()))((((()))))(())(((((())))))((((()))))((((()))))((((())))))))))((((((()))))(((())))(((((())))))(((((())))))((((()))))()((((()))))((((()))))(((((())))))(((())))(((((())))))(((((())))))(((((())))))((()))((()))(())(((((())))))((((()))))(())))((((()(((())))(((((())))))(((())))((((()))))(((((())))))(((())))(())((((()))))(())((((()))))(((((())))))(())))(((((((()))))(())(())((()))((((()))))((((()))))((())))))((((((((((()))))((()))(((((())))))))))))((((((()))))(((())))((((()))))(())(())(())()(((((())))))(((((())))))((()))(((())))((()))(())(())))((((((((())))((()))(())((()))((()))(((())))((((()))))((((()))))(((((())))))(((())))(((((())))))((((())))))))))((((())))()((((()))))(())((()))(((((())))))(((())))((((()))))(((())))(())(((())))((()))((((()))))((((()))))((((()))))(((((())))))((()))((((()))))()(())())(((((((((()))))()()(())(((((())))))()(())(((((())))))(())()(((())))((((()))))(())(())((((()))))((((())))))))))((((()))((((()))))(((())))(())(())(((((())))))(())(((())))()((()))((((()))))(())((((()))))(((())))(((())))(((())))()(((())))((()))()(((())))(())))(((((((()))((()))((((()))))((()))(((((())))))(((((())))))((()))(())((((()))))(((((())))))(())((((()))))((((()))))()((()))((((()))))(())(((((())))))((((()))))((((()))))((((())))))))))((((((()))))(((())))(((((())))))(((((())))))((((()))))()((((()))))((((()))))(((((())))))(((())))(((((())))))(((((())))))(((((())))))((()))((()))(())(((((())))))((((()))))(())))))"), 130450)
//Test.assertEquals(evalParentheses
//Test.assertEquals(evalParentheses
//Test.assertEquals(evalParentheses("((((()()((((()))))((((((()))))))((()))((()))(())(((())))((((()))))(())((()))(((())))(((((())))))(((((())))))(())(((())))))))((((((((((())))))((((((()))))))((((((()))))))()(((())))((((((()))))))((((()))))(((())))((()))(())((((()))))((((()))))((((()))))(((())))((((())))))))))((((((((((()))))))((()))()(())(((())))(((())))(((())))))))(((((((((())))(((())))((()))(((())))(((((())))))()(())()()((((()))))((((((()))))))(((((())))))))))))(((((((()))))))((()))(((((())))))()(((((())))))((((((()))))))()(((())))()())((((((()))(())((((()))))((()))(())((((()))))(())()()((((()))))((((()))))((((()))))(((())))))))((((((((()()((((()))))((((((()))))))((()))((()))(())(((())))((((()))))(())((()))(((())))(((((())))))(((((())))))(())(((())))))))((((((((((())))))((((((()))))))((((((()))))))()(((())))((((((()))))))((((()))))(((())))((()))(())((((()))))((((()))))((((()))))(((())))((((())))))))))((((((((((()))))))((()))()(())(((())))(((())))(((())))))))(((((((((())))(((())))((()))(((())))(((((())))))()(())()()((((()))))((((((()))))))(((((())))))))))))(((((((()))))))((()))(((((())))))()(((((())))))((((((()))))))()(((())))()())((((((()))(())((((()))))((()))(())((((()))))(())()()((((()))))((((()))))((((()))))(((())))))))))))"), 491504)
//Test.assertEquals(evalParentheses

//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////


//title: Plant the Grass

//tags: algorithms,recursion

//url: https://edabit.com/challenge/pp6Bqu2aXdPYWPPAD

//Description:
//You will be given a matrix representing a field g and two numbers x, y coordinate.
//There are three types of possible characters in the matrix:
//x representing a rock.
//o representing a dirt space.
//+ representing a grassed space.
//You have to simulate grass growing from the position (x, y). Grass can grow in all four directions (up, left, right, down). Grass can only grow on dirt spaces and can't go past rocks.
//Return the simulated matrix.
//Examples
//simulateGrass([
//  "xxxxxxx",
//  "xooooox",
//  "xxxxoox"
//  "xoooxxx"
//  "xxxxxxx"
//], 1, 1) ➞ [
//  "xxxxxxx",
//  "x+++++x",
//  "xxxx++x"
//  "xoooxxx"
//  "xxxxxxx"
//]
//Notes
//There will always be rocks on the perimeter.

//code area
///////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////

//tests:

//Test.assertSimilar(simulateGrass(["xxxxxxx","xooooox","xxxxoox","xoooxxx","xxxxxxx"], 1, 1), ["xxxxxxx","x+++++x","xxxx++x","xoooxxx","xxxxxxx"])
//Test.assertSimilar(simulateGrass(["xxxxxxx","xoxooox","xxoooox","xooxxxx","xoxooox","xoxooox","xxxxxxx"], 2, 3), ["xxxxxxx","xox+++x","xx++++x","x++xxxx","x+xooox","x+xooox","xxxxxxx"])
//Test.assertSimilar(simulateGrass(["xxxxxx","xoxoox","xxooox","xoooox","xoooox","xxxxxx"], 1, 1), ["xxxxxx","x+xoox","xxooox","xoooox","xoooox","xxxxxx"])
//Test.assertSimilar(simulateGrass(["xxxxx","xooox","xooox","xooox","xxxxx"], 1, 1),["xxxxx","x+++x","x+++x","x+++x","xxxxx"])
//Test.assertSimilar(simulateGrass(["xxxxxx","xxxxox","xxooox","xoooxx","xooxxx","xooxxx","xxooox","xxxoxx","xxxxxx"], 4, 1),["xxxxxx","xxxx+x","xx+++x","x+++xx","x++xxx","x++xxx","xx+++x","xxx+xx","xxxxxx"])
//Test.assertSimilar(simulateGrass(["xxxxxxxxxxx", "xoxooooooox", "xoxoxxxxxox", "xoxoxoooxox", "xoxoxoxoxox", "xoxoxoxoxox", "xoxoxxxoxox", "xoxoooooxox", "xoxxxxxxxox", "xooooooooox", "xxxxxxxxxxx"], 1, 1), ["xxxxxxxxxxx", "x+x+++++++x", "x+x+xxxxx+x", "x+x+x+++x+x", "x+x+x+x+x+x", "x+x+x+x+x+x", "x+x+xxx+x+x", "x+x+++++x+x", "x+xxxxxxx+x", "x+++++++++x", "xxxxxxxxxxx"])

//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////


//title: Vampire Numbers

//tags: algorithms,higher_order_functions,numbers,recursion

//url: https://edabit.com/challenge/MLTdtrePXWtv7nfnM

//Description:
//A Vampire Number is a positive integer greater than 99, that rearranged in all of its possible digits permutations, with every permutation being split into two parts, is equal to the product of at least one of its permutations.
//If the number has an even quantity of digits, left and right parts will have the same length in every permutation;
//If the number has an odd quantity of digits and at least three digits, the left and right parts will present different lengths for every possible permutation, alternating between them in the range +1 and -1.
//Given a positive integer n, implement a function that returns the type of n as a string:
//'Normal Number' if n is lower than 100 or if no permutations return a product of their parts equal to n.
//'Pseudovampire' if n it is a Vampire with an odd quantity of digits.
//'True Vampire' if n it is a Vampire with an even quantity of digits.
//Examples
//isVampire(1260) ➞ "True Vampire"
//// Has an even number of digits and is greater than 99)
//// Permutations:
//// 12 * 60 = 720
//// 16 * 20 = 320
//// 10 * 26 = 260
//// 21 * 60 = 1260
//
//isVampire(126) ➞ "Pseudovampire"
//// Has an odd number of digits and is greater than 99
//// Permutations:
//// 12 * 6 = 72
//// 1 * 26 = 26
//// 21 * 6 = 126
//
//isVampire(67) ➞ "Normal Number"
//// Is lower than 100
//// Permutations:
//// 6 * 7 = 7 * 6 = 42
//Notes
//Trivially, a number from 1 to 99 is a Normal Number by the definitions: a single-digit number can't be split into two parts, and the product of the permutated two digits of a number will always be lower than the number itself.

//code area
///////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////

//tests:

//Test.assertEquals(isVampire(1260), "True Vampire", "Example #1")
//Test.assertEquals(isVampire(126), "Pseudovampire", "Example #2")
//Test.assertEquals(isVampire(67), "Normal Number", "Example #3")
//Test.assertEquals(isVampire(1), "Normal Number")
//Test.assertEquals(isVampire(645), "Normal Number")
//Test.assertEquals(isVampire(688), "Pseudovampire")
//Test.assertEquals(isVampire(1345), "Normal Number")
//Test.assertEquals(isVampire(1395), "True Vampire")
//Test.assertEquals(isVampire(12964), "Pseudovampire")
//Test.assertEquals(isVampire(98765), "Normal Number")
//Test.assertEquals(isVampire(124421), "Normal Number")
//Test.assertEquals(isVampire(125460), "True Vampire")

