

//title: Chinese Remainders

//tags: algorithms,math,numbers

//url: https://edabit.com/challenge/ZkYHTLivZgtn2SZwr

//Description:
//Create a function that finds a number n so that n mod y = x, given an array of x-y pairs, where (0 ≤ n ≤ product of all y's).
//This challenge is related to the Chinese Remainder Theorem, which states that there is one and only one integer n that is congruent with a number of divisors (called moduli) and their remainders for n so long as those moduli are coprime, where n is comprised between 0 and the product of all moduli.

//For example, there is only one value between 0 and 3 × 4 × 5 = 60 for n so that:
//n mod 3 = 0
//n mod 4 = 3
//n mod 5 = 4
//Here, n = 39 because 39 mod 3 = 0, 39 mod 4 = 3, and 39 mod 5 = 4, and 3 and 4 are coprime, and so are 3 and 5, and 4 and 5. The numbers -21 and 99 would also be congruent with the moduli and remainders given, but we will not be considering those as they aren't in the range (0, 60).
//Your input will be an array with a number of tuples in the form (remainder, modulo) and the output should be a number n congruent with those moduli and remainders.
//Examples
//remainders([[0, 3], [3, 4], [4, 5]]) ➞ 39
//// 39 mod 3 = 0, 39 mod 4 = 3 and 39 mod 5 = 4
//
//remainders([[1, 2],  [8, 9]]) ➞ 17
//// 17 mod 2 = 1 and 17 mod 9 = 8
//
//remainders([[0, 15], [7, 16], [2, 17]]) ➞ 2535
//// 2535 mod 15 = 0, 2535 mod 16 = 7 and 2535 mod 17 = 2
//Notes
//You don't need to check for co-primality. Assume all moduli in the input will be coprime.
//An input will be at least one tuple.
//Test cases will include large numbers (check for efficiency).

//code area
///////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////

//tests:

//Test.assertEquals(remainders([[6, 10]]), 6)
//Test.assertEquals(remainders([[0, 500]]), 0)
//Test.assertEquals(remainders([[0, 3], [3, 4], [4, 5]]), 39)
//Test.assertEquals(remainders([[1, 2],  [8, 9]]), 17)
//Test.assertEquals(remainders([[0, 15], [7, 16], [2, 17]]), 2535)
//Test.assertEquals(remainders([[4, 7], [2, 3], [2, 4], [3, 11], [8, 17]]), 1334)
//Test.assertEquals(remainders([[7, 14], [15, 23], [3, 5]]), 1533)
//Test.assertEquals(remainders([[26, 100], [523, 809]]), 54726)
//Test.assertEquals(remainders([[2, 83], [845, 991], [166, 200]]), 1220766)
//Test.assertEquals(remainders([[56, 79], [8, 9], [102, 169], [8, 10], [14, 49]]), 21215348)
//Test.assertEquals(remainders([[8, 9], [2, 4], [1, 5], [0, 13], [40, 43], [0, 7], [1, 11], [5, 29]]), 145587806)
//Test.assertEquals(remainders([[1, 3], [4, 5], [4, 13], [4, 43], [4, 7], [0, 2], [4, 29]]), 4)

//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////


//title: Recursion: String Compression from Character Array

//tags: arrays,recursion,strings

//url: https://edabit.com/challenge/hNCyj6c5B6FmG3KGE

//Description:
//The function is given an array of characters. Recursively compress the array into a string using the following rules. For each group of consecutively repeating characters:
//If the number of repeating characters is one, append the string with only this character.
//If the number n of repeating characters x is greater than one, append the string with "x" + n.
//Examples
//compress(["t", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "s", "s", "s", "h"]) ➞ "te14s3h"
//
//compress(["a", "a", "b", "b", "c", "c", "c"]) ➞ "a2b2c3"
//
//compress(["a"]) ➞ "a"
//
//compress(["a", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b"]) ➞ "ab12"
//
//compress(["a", "a", "a", "b", "b", "a", "a"]) ➞ "a3b2a2"
//Notes
//You are expected to solve this challenge using the concept of recursion.
//Check out the Resources tab for more details on recursion.
//An iterative version of this challenge can be found via this link.
//A collection of challenges in recursion can be found via this link

//code area
///////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////

//tests:

//const recursive = f => (`${f}`.match(RegExp(`${f.name}`,'gm'))||[]).length > +(/function/.test(f))
//Test.assertNotEquals(recursive(compress), false, "Recursion is required!")
//let [actualParam, expectedParam] = [
//  [
//    ["a", "a", "b", "b", "c", "c", "c"], ["a"], ["a", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b"],
//    ["a", "a", "a", "b", "b", "a", "a"], ["t", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "s", "s", "s", "h"]
//  ],
//  ["a2b2c3", "a", "ab12", "a3b2a2", "te14s3h"]
//]
//for (let i in actualParam) Test.assertEquals(compress(actualParam[i]), expectedParam[i])
//for (let i = 0; i < 20; i++) {
//  let [actual, expected] = [Array(), Array()]
//  for (let k = 0; k < Math.random() * 200 + 1; k++) {
//    let [c, n] = [String.fromCharCode(97 + k % 26),
//                  Math.round(Math.random() * 200 + 1)]
//    actual = [...actual, c.repeat(n)]
//    expected = [...expected, n > 1 ? c + n : c]
//  }
//  Test.assertEquals(compress(actual), expected.join(''))
//}

//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////


//title: Closed Brackets String

//tags: algorithms,data_structures,strings,validation

//url: https://edabit.com/challenge/MBZnmtRraFaz5hxRc

//Description:
//The function is given a string consisting of a collection of three characters:
//"(" open bracket
//")" closed bracket
//"J" Joker, which can be replaced by "(", ")" or ""
//Develop a solution to determine if the given string represents a proper sequence of parenthesis; return true / false. Each open bracket on the left should have a corresponding closed bracket on the right. For example "(()())" is a proper sequence, "()(()" is not a proper sequence. The presence of Jokers adds an extra level of difficulty to the analysis because each "J" makes three possibilities to consider. An empty string is considered a valid string because it does not contain unbalanced brackets.
//Examples
//closedBrackets("(J))") ➞ true
//// J can be replaced with (
//
//closedBrackets("(") ➞ false
//// Unbalanced open bracket.
//
//closedBrackets("") ➞ true
//// Empty string is a valid sequence.
//
//closedBrackets("()J(") ➞ false
//// Not possible to balance the brackets.
//
//closedBrackets("J") ➞ true
//// J can be replaced with an empty string.
//
//closedBrackets(")(") ➞ false
//// Numbers of ( and ) are the same but they are in the wrong places.
//
//closedBrackets("()") ➞ true
//// A proper sequence of balanced brackets.
//Notes
//N/A

//code area
///////////////////////////////////////////////////////////////////////////
const closedBrackets = inputs => {
    
}


//////////////////////////////////////////////////////////////////////////

//tests:

//Test.assertEquals(closedBrackets("(J))"), true)
//Test.assertEquals(closedBrackets("("), false)
//Test.assertEquals(closedBrackets(""), true)
//Test.assertEquals(closedBrackets("()J("), false)
//Test.assertEquals(closedBrackets("J"), true)
//Test.assertEquals(closedBrackets(")("), false)
//Test.assertEquals(closedBrackets("()"), true)
//Test.assertEquals(closedBrackets("((())(J)J((J)))(())((J)))(((((J))(((J))))))(((J)(J)))(J)(((J)))(())((()))(((J))(J))((()(J)((J))J(J))(((J)))))(())((J))(J)((J))(((J)))((((JJ)()((J))(())))((((J)))(())(((J))))((((((J)))))))(J)((((((())))))"), false)

//Test.assertEquals(closedBrackets("((((()))((()))()((()))((()))))((())(()))((((()))((J))()(())()((()))))(((()))((()))((()))(J)(()))(())(((J))J(())((()))((J))((((((J)))()(())())))(((()))((()))(()))(((J))()((J)))J)()((((())(())(())(())((())))))((()))((()))((()))(J)(((()((()))((J))((()))(()))))"), true)

//Test.assertEquals(closedBrackets("((((()))(())(J)((()))((()))(())))((J))(())((()))(())()((()))()((()))((J))(())((()))((()))((()))(())(((J)(())((()))((()))(())(())))(((()((()))()J(())))))(()(())())(((()(()))))()(())((((J))()((J))((())))))((((())()((()))((())))))((()()(())()()))(()()((()))(())(()))((())(())((()))((()))()((())))((())((())))(())((()))(())((J))J)((J))(J)((()))((()))()(())))))(((()))()())())))))"), false)

//Test.assertEquals(closedBrackets("(((((((())))((())))())(((J))))))))((((J))))(())(((())))(((J))))((()))()((()))(((())))()(((((J)(((())))()((()))(())()))))((((J))(((())))((J))(())(())(((())))))((((())()(J)((J)))))(((((())))((()))()()))((()((()))(((())J)))((()((J))()(((())))()()))((((J))))(())(J)(((J)))((()))(((()))))(((((()))())))((((((()))(())(((())))))))((((())(((J)))(((())))((())))))((((())(((()))))))((()J())()(J)(((())))()))(((((()))()(())(J)(())(()))))((((())((())))))(((((())(())(((())))(())))))((())((((J))))(((())))((()))(((())))(J)()((((J))))((J()()(J))))((()((()))))(((((()))((()))(J(())))((()))((())))))(((((()))(((()))))))"), false)

//Test.assertEquals(closedBrackets("((((())(((())))))J(((J)()))((((((())))(()))))()(JJ))()(()((()))(()))(())()((())(())((()))())(((())((()))(((())))()(((J)))))((((((()))()(J)((((J))))((()))))))((J(((()))()(())((J))((J))))))(((((())()(((())))(((())))))))(((())))(((())))((((())((()))((()))(((J)))(()))))(((((((())))J(()))(((())))))))((((((()))((()))))))()((((J))))((()))((((()()J(J))(())(())))))(((((()))((()))(())(()))))((((J(((J))))(J)()(())((()))((((J)))))))((((((J))))(())((()))()))(((())()))((((((()))(())(())))))((((())()(())(())(((())))(((J)))))((((((()))((()))((()))(J)(())))))((((((())))((())))))(((((())(((())))(J)(((())))(((())))((()))))))((((J))(())()J)((()))()(((())))((J))((J)(())()((J))(()))((((())))(()))"), true)

//Test.assertEquals(closedBrackets("(((((J))))()(())(((()))))((((((J)))((()J)()(J)()))))((J))((()))((()))((()))((((()))((J))((((J)))))(((J))((()))(())())(((((())))(((())))(((())))))(((((())))()))(((((((JJ))((()))()((()))))))(())()(((J)))((((((()))(())(())((()))(((J)))))))J()()())(((()(())(())(((()))))))((((())))((()))(()))((((())))(())((((J))))((((J))))((()))(()))((J())(J)(())()))((((()(((())))(())))))(((((J)((()))())))((()))()((((J))))(())((()((()))((()))(())))((()()(((())))))((())(())(((J)))()(((()))))(((((J)()((()))(((())))(J)(((()))J))))((()(((())))((J)))()()((()))(((())))((()))(((((((J))))(J)((()))(((())))(((J)))(J))))()(((J)))(())((()))(J)(((((()))(())(())())))(((((((())))(((())))))))((())((((J))))((())))((((((J)))(())((()))()((J))))))()((()))((()))((()))()()((((()(())))))(()()(())(JJ)J)((((())))(()))((((((J)))()())))()((()))(())(((())))(J)"), true)

//Test.assertEquals(closedBrackets("(((((())))((J))(())()((()))))((((((()))(((())))(((())))()))))(((((())(((())))((((J))))(((())))))))((((()(((())))(((())))((()))()((()))))))(((((()))(((()))))))(((()))((()))((()))(())((())))((((((()))(())((()))((()))()))))(((J)((()))((()))(J((J)))J))((((((()))((J))(((())))))))((((()))()(((())))((()))))((())(((())))(((())))(())((((J))))(()))((((()(())(((())))(((())))(())))))(((((()))(()))))((((((()))((J())))))))J(((J))))((J))(((((())))()))(((((())))((()))(J)))((((((())))(())(J)))((((())))((()))(((()))))(((((()))()())))(()()(())(())())(J()))(())(((())))(((())))(())((()))((((()))(J())J((()))(())(())))((((J(())))(((())))(()))))(((((())(())))))((()(()J))((((J)))((J)))()(((())J)(((())))((()))(())(())()((((J)))(((())))(((())))(())(((()))))((((())(((()))))))((((((())))((())))))(((())))((()))(J)()(((((()))J(J))((())))))((()(((())))(((())))(J)()))((()))((()))((J))((J))((((())))"), false)

//Test.assertEquals(closedBracketsfalse)

//Test.assertEquals(closedBracketstrue)

//Test.assertEquals(closedBrackets("((()((()))))((((())))(J)()(((J)))(J)(()))(((J)((()))(((())J)))(((()))(((())))((((J)))))()(())((()))(((())))((((()))((()))(((())))(())((J))(((())))))((((((J))(())(((())))((()))))))((((((())))((()))(()))))(((J)))((((J)))((((J))))((((()))()(())(J)((()))()))((()))(())((()))((((()))(J)(())((()))()))(J()(())()((()))(())((()))))(((()(((())))()())))((()()(J)))((((J)(())((()))))(((J)(((())))((()))))(((((((J))))(((())))(((()))J)))J((()()((()))(((())))(((()))))))((((((()))((()))()()(())()))))(()((((J))))(()))(((((()))(((())))()(((()))))))((((((())))((()))((((J))))((())))))((()((()))(((())))))(((()((()))((()))((())))))(((((()))()(((())))(((())))((())))))(((((())(((J)))()(())(())(())))))(((J)))((()))(((())))(((())))(()((((J)))))((((((J))))((((J))))(())))((()))((J))((()))(())((()))(())()((((((((J))))J(J))))))(((((()))((()))J())(((J)))(((())))(()))))((((()J)(())))(((()))(((()))))(((()()()((()))()(()))))((((((J))))(((())))((((J))))()((()))((()))))(((()))(((()))))((((())()((J))((()))(()))))(())J())(((())))((((()))(())))((((((()))(((())))((J(J))))(J)()((((J))))))))(((J)))()()()((((()(((())))(J)))))((((J)))(J)((J))()((J()J))(((()))))((((((())))((J))((J)))))(((()((()))(((())))((J))(()))))(((((((J)))((()))))))J((((())))(())))(((()))((())))()()(((J)))((((())()(())(((())))J()))))((((J))(())(((())))(((())))()))(((((())(((())))))))(((()((()))(J))))(())(())()((((())))((())))(((((((())))(())((()))))))((((J)))((J)))((()(((())))))(((((())((()))(((())))(())))))(()(((J)))((J)))((((((()))(())()))))((((((())(((J)))(J()(((()))))))"), false)

//Test.assertEquals(closedBrackets("((())()(((())))()()(((()))))((())())((((((()))(((())))(J)((()))(())((J))(((())))((()))))))(((JJ))(())(())(J))(((())))(((())))(())((()))(J)((((((()))()()))))(((()(((())))((((J))))(())(())(((())))((())))))((((J))))((()))(((())))(J)()((((J))))((((()(())((()))()(J)(())))))((((J()))(((J)))(((())))(())((J))()()((())))))()((((J))))(((())))(((())))()((J))(((((((())))((()))))))((((((())))((()))(((())))(((())))(((()))))))((((((()))()(())((()))(((())))()()(J)(())))))(((J)(())(())((()))(((())))((J))(((())))))((((()))(((())))((()))((()))(((())))((()))()()()))((((((()))((()))))))((((())))((()))(())(((()))))(((((()))((((J)))))))(((((((())))((()))))))((((())))()((J)))(((())))(())(((J)))()(((J)))))(((((()))(J(((())))(((()J))(())((())))))((()))(())(((())))(((())))(((J)))(())(((())))(((()())))((((J)))(((())))((((J)))))((((((())))(()))))((((()(J)((J))((()))(())()(((())))))))(((()(((J)))((J))((()))(((())))(((()))))))((((((()))(J)()((()))(())((()))((()))()))))((((())))(((J)))(J)())(((()))(((())))((()))()((()))(())(((())))()((J)))(((((J))(())((()))(((())))(J)J))((((())(())(((())))()(((J))))))(((())()()((()))((()))(())()()))(((((())(((())))()((()))()(((())))((()))((()))))))(((())((()))((()))()(())()(((())))((()))))((()(((())))((()))))(((())))(J))(J)(((()J))(((J))(((((()))(())(((J)))(J)(J)(()))))((()))(())()(())(())(((()))((()))()()((())))(((()))(())(()))(((())(())((()))()()()()((()))((()))))(((((((())))((J))(())(((())))((()))))))(((()())))((((((())))((()))((()))(((())))(())()((()))(J)(((()))))))(((J)((()))(())(((())))((()))()((()))((()))))(((())((()))((()))((JJ)))()(((())))((((J))))((((J))))(())))(((((())))(J)(((())))()(())(((())))(((())))(((())))))(((())))()((()))((()))((((J))))((((J)J))()((()))(J)(((((())))(())(J)(J)))((((((((J))))(())((()))))))(((()()J())(((J)))((()))(J)((J))(()))))((((()))(())(())(((())))(((J)))(((())))(())()((((J))))))(((((())()()((()))((((J))))(())(())))))(J()))()((()))(())((()))(())(())(((())))(())()((()))(()()((()))(())(((())))(((()))))((((((())))((()))(())((()))((()))((()))(((())))()(((()))))))(((((J)))()(J)((()))((()))((()))(())((J)))J()(J)()(((())))((((J))))(((((J))))(((())))()((J)))((((())(((())))()()())))(((())))((()))((()))((()()()(())()))"), true)

//Test.assertEquals(closedBracketsfalse)

//Test.assertEquals(closedBracketsfalse)

//Test.assertEquals(closedBrackets("((((())(())(())(())()())))((((())(((())))()((()))()(((())))(((J)))(J)(((())))(((()))))))(((()))()())(((()))()()(((())))(((())))()((J())))((())))((((())(())(((())))((()))(((())))(((()))))))(((())(((())J)(J)(((J)))(((J)))(())(((J))))((()))((()))()(())((J))((((()))(((())))(())(J(J)))()(())(J)(J)((()))(((J)))(((J))))(()((()))((()))(((()))))((((((J))))((()))()(((())))((()))(())))()(((())))(((())))(())(())()(())(((J)))((()))(())()((J))((((()))((((J))))(())(((())))(())(((())))))((())(())(())(((())))(((())))(((())))(())(()))(J(((())))((((J))))(())J(()))(((())))()((J())))()(((())))(())(J)))(J(((()))(())((()))(((J)))(((J)))(((())))())))((((((()))()))))(())(())()()(((J)))()((()))()()(())(((J)))((((((J)))()(((())))(J()))(((())))(()J)))(((())))((J))((()))(())((J))J((())))((()))((()))((()))(J)(((((J)))(())(())((()))(())((((J))))((()))(((())))(())))((()))()(())(())()((()))((J))(((((()))J(((())))((()))()((()))(())(J)))(())((()))(((())))(((())))()((()))((()))()((()))(((((()))()(((J)))(((())))())))()()(())()(())((()))((()))((()))((()))((J))(J)((()))(())((J))((()))((()))()((()J)((())((())))()(())(())(((J)))(())((()))((J))(((J))(((())))()(()JJ)(((((())(())(())(((())))(J)()((((J))))(())(J)(())(((())))))))((((()))(((J)))()(())()))(((((())(())((()))(())((()))(())((()))()((()))()((((J))))))))((((()()((()))()(((())))(((())))((()))(((())))))))(((()()(())(((())))(((())))((()))()((((J))))(((())))(())((((J))))(()))))((((((J)))((((J))))((()))((()))(((())))(J)(((())))(())(())())))(()(())((()))()(())(((())))(J)()(())(J(J)))((()))((())))(())(J)((J))(J))()((((((J))))((()))))((((())))(())((()))())(((((()))(())((()))((()))()((J))((((J))))((()))((())))))(((()))(((J)))((((J))))((()))()(((()))))(((((())))((()))((()))(((())))((((J))))))((()))(J()))(())((()))(())(())(((())((()))()(())((()))((J))((J))(())))((()))(((())))(((())))(J((()))(())()((((J)(((())))()(J(J)(())(((())))(((())))(())(((())))(((()))))))(((((J))))((J))J)((((J))))((()))()((((J))))(((())))(((()))))(((((())()(J)((()))))))((())(((())))((()))(J))((((()))()()((()))))(J)()()((J())))()((((()))(((())))()(((())))(((())))((()))(())(((())))(((())))))(())((J())))((()))(((())))(((())))((()))((()))((()))(((())))((((J))))(((())))()((((J)((J))()((()))((J))(())()()(((())))(())))J(((((())))((J))()(())))(((((((())))(())(())(J)))))((())((()))((((J)))))(J(((())))((()))()((J))()(((())))(((())))(())()(J)((((J))))))(()((()))()((()))((())))((((()((()))))))(((((())((()))(())(())((J)))(((())))((()))(J)()((()))(((J)))()))))((((()(((J)))((()))((()))((()))(((())))((((J))))))))(((J)((()))(((())))(((())))(((())))(())((((J))))))(((((J))))(())(())(())((((J)))((()))(())((((J))))(((())))(((())))(((()))))((((J)))()((()))(((()))))((((())((((J))))(((()))))))(((((((())))(((J)))()((()))()((()))(())(((())))(((J)))(((())))))))(((((J)(((())))(((())))(J(((())))(J(((())))((()))))))((())(())(((J)))()(J)()(J))()(())((J))(((J)))(())(((J)))((()))(((J)))(((J)))(J)((((((()))(((J)))(((())))(()))J))(((((()))(((JJ))))((()))()()((()))((J))(((()))))))(((((())))()((()))((()))(J)()((J))(((())))(J)))((((J))))((((J))))(((())))(((())))(((()(())(()))))((()))()(())((((((()))()()(())()(((())))()))))(((((())))((()))(()J((()))))(((((()))((()))()()((()))()(())((((J)))(())())))(((((())()()))))(((((())))((((J))))((J)(())()((()))(J)(((J)))()(())))(()(J)((()))((J))(())()((()))((()))((((J))))(())(((()))))((())(())J(((J))))(J)((()))((()))(())()(((()))))(((((())((()))(())((()))(())((()))))))(((((J)))()()(((J))(((())))))(((()))(((())))(())((()))((()))(J)(((())))(((())))((()))(((())))((()))((())))((((((())))()(((())))(((())))(J))(())(((())))((()))((((J))))((J))()((())))))(((())J)(J)()()((JJ)))(())()()(((())))()((((((J))))()(())((()))(())()(()))J((((()))(())(((())))((J))J(())(((())))(())()(((())))))((((())())))(((((())))()((()))()(((())))()))((((()(())))))(((())(())(((J)))(())()(())()))(((((())(((())))))))(()()(((J)))()((()))(())((()))())((())(((())))(())((())J()(())()(()))(((()((((J))))(((())))(((())))((()))((()))((()))(((J)))())))(((())(((())))(((()))J()((J))(((())))))((J((((()))J((()))((J))))))"), true)

////Evgeny SH

