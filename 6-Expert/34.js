

//title: Capitalization Families

//tags: arrays,sorting,strings

//url: https://edabit.com/challenge/socoDGxk3JGKezRYm

//Description:
//Write a function that groups words by the number of capital letters and returns an array of object entries whose keys are the number of capital letters and the values are the groups.
//Examples
//grouping(["HaPPy", "mOOdy", "yummy", "mayBE"]) ➞ [
//  [0, ["yummy"]],
//  [2, ["mayBE", "mOOdy"]],
//  [3, ["HaPPy"]]
//]
//
//grouping(["eeny", "meeny", "miny", "moe"]) ➞ [
//  [0, ["eeny", "meeny", "miny", "moe"]]
//]
//
//grouping(["FORe", "MoR", "bOR", "tOR", "sOr", "lor"]) ➞ [
//  [0, ["lor"]],
//  [1, ["sOr"]],
//  [2, ["bOR", "MoR", "tOR"]],
//  [3, ["FORe"]]
//]
//Notes
//The object entries have to be sorted by the number of capital letters.
//The groups will be arrays of all words sharing the same number of capital letters.
//The groups have to be sorted alphabetically (ignoring case).
//Words will be unique.

//code area
///////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////

//tests:

//Test.assertSimilar(grouping(["MOVIE", "TAKE", "PERSON"]), [
//  [4, ["TAKE"]],
//  [5, ["MOVIE"]],
//  [6, ["PERSON"]]
//])
//​
//Test.assertSimilar(grouping(["the", "them", "theme", "EVERY"]), [
//  [0, ["the", "them", "theme"]],
//  [5, ["EVERY"]]
//])
//​
//Test.assertSimilar(grouping(["HaPPy", "mOOdy", "yummy", "mayBE"]), [
//  [0, ["yummy"]],
//  [2, ["mayBE", "mOOdy"]],
//  [3, ["HaPPy"]]
//])
//​
//Test.assertSimilar(grouping(["eeny", "meeny", "miny", "moe"]), [
//  [0, ["eeny", "meeny", "miny", "moe"]]
//])
//​
//Test.assertSimilar(grouping(["FORe", "MoR", "bOR", "tOR", "sOr", "lor"]), [
//  [0, ["lor"]],
//  [1, ["sOr"]],
//  [2, ["bOR", "MoR", "tOR"]],

//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////


//title: Can You Exit the Maze?

//tags: arrays,functional_programming,games,higher_order_functions

//url: https://edabit.com/challenge/ogDHjfpAcE896kN4H

//Description:
//A maze can be represented by a 2D matrix, where 0s represent walkeable areas, and 1s represent walls. You start on the upper left corner and the exit is on the most lower right cell.
//Create a function that returns true if you can walk from one end of the maze to the other. You can only move up, down, left and right. You cannot move diagonally.
//Examples
//canExit([
//  [0, 1, 1, 1, 1, 1, 1],
//  [0, 0, 1, 1, 0, 1, 1],
//  [1, 0, 0, 0, 0, 1, 1],
//  [1, 1, 1, 1, 0, 0, 1],
//  [1, 1, 1, 1, 1, 0, 0]
//]) ➞ true
//
//canExit([
//  [0, 1, 1, 1, 1, 1, 1],
//  [0, 0, 1, 0, 0, 1, 1],
//  [1, 0, 0, 0, 0, 1, 1],
//  [1, 1, 0, 1, 0, 0, 1],
//  [1, 1, 0, 0, 1, 1, 1]
//]) ➞ false
//
//// This maze only has dead ends!
//
//canExit([
//  [0, 1, 1, 1, 1, 0, 0],
//  [0, 0, 0, 0, 1, 0, 0],
//  [1, 1, 1, 0, 0, 0, 0],
//  [1, 1, 1, 1, 1, 1, 0],
//  [1, 1, 1, 1, 1, 1, 1]
//]) ➞ false
//
//// Exit only one block away, but unreachable!
//
//canExit([
//  [0, 1, 1, 1, 1, 0, 0],
//  [0, 0, 0, 0, 1, 0, 0],
//  [1, 1, 1, 0, 0, 0, 0],
//  [1, 0, 0, 0, 1, 1, 0],
//  [1, 1, 1, 1, 1, 1, 0]
//]) ➞ true
//Notes
//In a maze of size m x n, you enter at [0, 0] and exit at [m-1, n-1].
//There can be dead ends in a maze - one exit path is sufficient.

//code area
///////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////

//tests:

//Test.assertEquals(canExit([
//  [0, 1, 1, 1, 1, 1, 1], 
//  [0, 0, 1, 1, 0, 1, 1], 
//  [1, 0, 0, 0, 0, 1, 1], 
//  [1, 1, 1, 1, 0, 0, 1], 
//  [1, 1, 1, 1, 1, 0, 0]
//]), true)
//​
//Test.assertEquals(canExit([
//  [0, 1, 1, 1, 1, 1, 1], 
//  [0, 0, 1, 0, 0, 1, 1], 
//  [1, 0, 0, 0, 0, 1, 1], 
//  [1, 1, 0, 1, 0, 0, 1], 
//  [1, 1, 0, 0, 1, 1, 1]
//]), false)
//​
//Test.assertEquals(canExit([
//  [0, 1, 1, 1, 1, 0, 0], 
//  [0, 0, 0, 0, 1, 0, 0], 
//  [1, 1, 1, 0, 0, 0, 0], 
//  [1, 1, 1, 1, 1, 1, 0], 
//  [1, 1, 1, 1, 1, 1, 1]
//]), false)
//​
//Test.assertEquals(canExit([

//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////


//title: Let the Dominoes Fall Down

//tags: algorithms,logic,regex,strings

//url: https://edabit.com/challenge/z3rMa8L6MCTdYNT6d

//Description:
//The function is given a string consisting of a mix of three characters representing which direction a domino is tilted:
//"R" tilted to the right
//"L" tilted to the left
//"I" standing up, not tilted
//The string represents the initial state of the assembly. After a time click the overall state can change. The tilted dominoes tend to tilt their standing-up neighbors. The propagation speed is the same for left and right. The following rules are applied:
//"RI" will change to "RR" unless "I" is being pushed from two opposite direction at the same time.
//"IL" will change to "LL" unless "I" is being pushed from two opposite direction at the same time.
//"RIL" will stay unchanged because "I" is being pushed from two opposite direction at the same time.
//"RIIL" will change to "RRLL" after one click.
//"RR", "LL" "RL" will stay unchanged.
//Some "I"s at the ends of the string may stay unaffected if no push came to them.
//Determine the final state of the assembly after all propagations have been exhausted and return it as a string (of the same length).
//Examples
//dominoesFall("") ➞ ""
//// No dominoes in the assembly.
//
//dominoesFall("RIIII") ➞ "RRRRR"
//// Propagation starts on the left causing all others to tilt right.
//
//dominoesFall("IIIIL") ➞ "LLLLL"
//// Propagation starts on the right causing all others to tilt left.
//
//dominoesFall("RIIIL") ➞ "RRILL"
//// After one click second and fourth tilt and then the middle one is pushed by two opposing forces.
//
//dominoesFall("IRIIL") ➞ "IRRLL"
//// The first one has not received any push.
//
//dominoesFall("IRRIL") ➞ "IRRIL"
//// The assembly is already in the final stage. No propagation was launched.
//Notes
//Keep in mind that the state changes time click after time click.

//code area
///////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////

//tests:

////Evgeny SH
//Test.assertEquals(dominoesFall(""), "")
//Test.assertEquals(dominoesFall("RIIII"), "RRRRR")
//Test.assertEquals(dominoesFall("IIIIL"), "LLLLL")
//Test.assertEquals(dominoesFall("RIIIL"), "RRILL")
//Test.assertEquals(dominoesFall("IRIIL"), "IRRLL")
//Test.assertEquals(dominoesFall("IRRIL"), "IRRIL")
//Test.assertEquals(dominoesFall("ILIRIIILRIILII"), "LLIRRILLRRLLII")
//Test.assertEquals(dominoesFall("RRIL"), "RRIL")
//Test.assertEquals(dominoesFall("IIIILIIRIIIL"), "LLLLLIIRRILL")
//Test.assertEquals(dominoesFall("LRIILIRRIIILRIIRII"), "LRRLLIRRRILLRRRRRR")
//Test.assertEquals(dominoesFall("IIILIIIIRIRIIIILRIIIILRIL"), "LLLLIIIIRRRRRLLLRRRLLLRIL")
//Test.assertEquals(dominoesFall("IRIILIILIIILLIIIIIIIIIIIILIIIIIIIILRIILILIIILIIILI"), "IRRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRRLLLLLLLLLLLLI")
//Test.assertEquals(dominoesFall("IILIIIIIILIIIRRIIILILILIRILILRLIIRIIIIIRIIIIRIIIILIILILILRIILIILRIIIIIIIRIL"), "LLLLLLLLLLIIIRRRILLLLLLIRILLLRLIIRRRRRRRRRRRRRRLLLLLLLLLLRRLLLLLRRRRRRRRRIL")
//Test.assertEquals(dominoesFall("RILIIIRIRLIIIIRRIIRLIRIILRIIRIILLIIIRLRIRIIIIIIRLIRIILRIIIIIIIRIILIIIILIIILLRILIIIRIILLLIRIRIRRIIIIR"), "RILIIIRRRLIIIIRRRRRLIRRLLRRRRRLLLIIIRLRRRRRRRRRRLIRRLLRRRRRRRRRRLLLLLLLLLLLLRILIIIRRLLLLIRRRRRRRRRRR")
//Test.assertEquals(dominoesFall("LIIILIIIILIILLIIILLIIILRIIIRIIIIIIIRILIIILLILIIIIIIIIILIRLLIILRIIRRLRIIIILIIRIIIRIIILRIIIRIRIILRIIIIILLIIIIRLILIIIILIIIIIIRIIIRIIRLLRIIIRIIIIIRIIIIILR"), "LLLLLLLLLLLLLLLLLLLLLLLRRRRRRRRRRRRRILLLLLLLLLLLLLLLLLLIRLLLLLRRRRRLRRRLLLIIRRRRRRILLRRRRRRRRLLRRRILLLLIIIIRLLLLLLLLIIIIIIRRRRRRRRLLRRRRRRRRRRRRRILLLR")
//Test.assertEquals(dominoesFall("RLIILLRIRIRIIIRIIRIRIILIILRIIIRIRIIIIILIIIIIIRIILRIIRIRIRIIIIRIIILLLILLILILRIIIIIRLIIIIILIILIRIIIIILIILIRIRLLIRIIIILIIIIRLILRIRLILIIIIILRIIIIRRILIIILILIIIRILIIRIIIILIIIIIRRILLILRIIILIIILIRLIIIIRIIIIII"), "RLLLLLRRRRRRRRRRRRRRRLLLLLRRRRRRRRRILLLIIIIIIRRLLRRRRRRRRRRRRRRILLLLLLLLLLLRRRRRRRLLLLLLLLLLIRRRILLLLLLIRRRLLIRRRLLLIIIIRLLLRRRLLLLLLLLLRRRRRRRILLLLLLLIIIRILIIRRRLLLIIIIIRRILLLLRRILLLLLLIRLIIIIRRRRRRR")
//Test.assertEquals(dominoesFall("IILRILLILIIIIRIRRIILILIIIIIILRRIIIIIRLIIIIIIRIIIRLRIIIIIRRRIIRIIIRILILIIILILIIIIIIIILIIILIIIIIRILLIIIIIIIIIIIIRIRIIIIIIIIIIIRRLRRILRIIRIIIIRRIIRRIIIIIIIIIRLIIIILIIRIIIIIIIIIIIILIIRRRIIILILLIIIIRIIIRIIIILRIILIRIIIRILIIIIIIIIIIIIIIIRIRILIILLIIIRIILIRIIIIIIRIIIIIIILIIIILIIIRIIIRILRIILRILIRLRLLILIIILILL"), "LLLRILLLLIIIIRRRRRLLLLLLLLLLLRRRRRRRRLIIIIIIRRRRRLRRRRRRRRRRRRRRRRILLLLLLLLLLLLLLLLLLLLLLIIIIIRILLIIIIIIIIIIIIRRRRRRRRRRRRRRRRLRRILRRRRRRRRRRRRRRRRRRRRRRRRLLLLLLIIRRRRRRRLLLLLLLIIRRRRILLLLLIIIIRRRRRRRLLLRRLLIRRRRRILIIIIIIIIIIIIIIIRRRILLLLLIIIRRLLIRRRRRRRRRRRILLLLLLLLLIIIRRRRRILRRLLRILIRLRLLLLLLLLLLL")
//Test.assertEquals(dominoesFall("IIIIIIIIRLRIRIIIILIIIIIIIIILILILILIIIIIIRIIIILIIIRIIIILIIRIIILIIIIIIIRRIIIIIIIIIIIIIIIIIIRIRRRIILIILIIIIIIRIRIIILIILILIILLLLRRIIILIILRRIRIIIRIILLLLRIRIRIIIIIIIILIIIIIIRRILLIIIIILIIIRIRLLLLIIIRIIIIRILIIIILIILIIIRIIIILLLIIIIIILIIIIIIIIIRIIILIIRIIILIIIIIILIILIIIIIIILLILRIIIIIRLIRLILRLRIIIIILIIIIIIIIRLIIRIIILRRLRIILRRRIIIIIIILIIIIILILIIRIRIIIIIRLIIIIILIIIIIIIIILRIIIIIIRIRLIIIIIRLIIILRLIIRIILIIIRIIIIII"), "IIIIIIIIRLRRRRRLLLLLLLLLLLLLLLLLLLIIIIIIRRRLLLIIIRRRLLLIIRRILLIIIIIIIRRRRRRRRRRRRRRRRRRRRRRRRRRLLLLLIIIIIIRRRRILLLLLLLLLLLLLRRRILLLLLRRRRRRRRRLLLLLRRRRRRRRRLLLLLIIIIIIRRILLLLLLLLIIIRRRLLLLIIIRRRRRRILLLLLLLLLIIIRRRLLLLLLLLLLLLIIIIIIIIIRRILLIIRRILLLLLLLLLLLLLLLLLLLLLLLRRRRRRRLIRLLLRLRRRILLLIIIIIIIIRLIIRRILLRRLRRLLRRRRRRILLLLLLLLLLLLIIRRRRRRRRRLLLLLLLLLLLLLLLLLRRRRRRRRRRLIIIIIRLLLLLRLIIRRLLIIIRRRRRRR")
//Test.assertEquals(dominoesFall("RIIIIIILLLILIIIIIIIIIIIILRILIIIRIRIIIIIIILIIRIIIIIIIIIIIILILIRIILIIILLLILRLIIIIIRILIIIIIRIIIILLRIRILIRIRIRIIILIIILIIIRIIIIIIILLIIIRLIIIIIIRIIIIIIILIRIIIIIIIIIRRIIIIRLIRRIIRIILIRRIIIRRLILIILIRIILIRRIIRIIIILIIRIRIIIRLIILIRIIIIIRLIIIIRRRRIIIRLRIILLIILRIRIIIIRLIRILILLIIILIILIIIIILIIRLLIIIIILRILIIRIRILILLLIILILIRIIILIIIRIILILIRIRIIRILLILILIIIIILRILIIIIIIIIIRRIRLRIILILIRLRILIIIRLLIRIIILIRRILLILIIRRIIILIIIIIRIIILIIIIIIILIRIIILLILRIIIRILRRIIIIIIIIIIRRIIIIIIILRIIIIIIRLLIIIIIIILIIIIIIIIRRRIRIIIRRIILLIILII"), "RRRRLLLLLLLLLLLLLLLLLLLLLRILIIIRRRRRRILLLLIIRRRRRRRLLLLLLLLLIRRLLLLLLLLLLRLIIIIIRILIIIIIRRRLLLLRRRILIRRRRRRILLLLLLIIIRRRRILLLLLIIIRLIIIIIIRRRRILLLLIRRRRRRRRRRRRRRRRRLIRRRRRRLLIRRRRRRRLLLLLLIRRLLIRRRRRRRLLLIIRRRRRRRLLLLIRRRRRRRLIIIIRRRRRRRRLRRLLLLLLRRRRRRRRLIRILLLLLLLLLLLLLLLLLIIRLLLLLLLLRILIIRRRILLLLLLLLLLIRRILLIIIRRLLLLIRRRRRRILLLLLLLLLLLLRILIIIIIIIIIRRRRLRRLLLLIRLRILIIIRLLIRRILLIRRILLLLIIRRRILLIIIIIRRILLLLLLLLLLIRRILLLLLRRRRRILRRRRRRRRRRRRRRRRRILLLLRRRRRRRRLLLLLLLLLLIIIIIIIIRRRRRRRRRRRLLLLLLII")
//Test.assertEquals(dominoesFall("RIRIIIILIIIIIRIIIIIRLIIIILIRIIIIIIIIILIIIILLIILIIIILRIIIIILIIRIRLIIILLIRIRIIIRLRIILIIRIRRLRIRIIRIIIIIIIRRLIIIIIIRLIRRIRIIIIIIIIILLIIILIIIRIIRILIRIIIIIIRIRIIIIIRIIIIIIILIRRRIIIIRILIIIIIIIRIIRLRRIIIIIIIIILRRIIRIILIRIIIIIRIILRRLILIIILLIIILLIIRIIRILIIIIIIIIIIIIILIIRIRILILIIRIRIILIIIIIIRIIIIRIIIIIIIIRILIIILLRIIRIIIIIIRIIRRLLIIIIIIIIILIIIRRILIIIIIIIRRRIIILIIIIIIILIRIRILIRILLIIRLIIIIIIIIILIIIIIIIIIRRIRIIIIILIRRIIIIIIIIIIIIIILLRIIIRLLRIILIRLLRRRLIIIIRLIRIRILIIRILIILIIIIIIIIRIRRRIIRLIIIRRIIIILIIILLLIIIRIRILRIIIILLIIIIIRRIIIIRLILRILILIIIIILIIIILIIIILIIIIIIILIIIRIIIILILRIIIIRRIIRRIIRIRLLILRILLIILIIIRIILIILIILIRRIIIIIILRIIILIIILRIIIIRILLIRIRIIIIRIRIILIIIIIRRIILIIIIIIIIILIIIIRRIIILLILRLIILRIIIIIIIIIIIILIIIIIIIILIRIILIRIIRIRIIRIIIIIRILILLRILLRRIIRIRIIIIILIILIIRILIIILIILIIIIIIIIRLILIIIIIIIIILIIIIIRILRRIIIIIIIIIIIIIRILIIRRRLLILLLLRRIRLIIIIRIIRILLIILIRLLI"), "RRRRRLLLIIIIIRRRRRRRLLLLLLIRRRRRILLLLLLLLLLLLLLLLLLLRRRILLLIIRRRLLLLLLIRRRRRRRLRRLLIIRRRRLRRRRRRRRRRRRRRRLIIIIIIRLIRRRRRRRRILLLLLLLLLLIIIRRRRILIRRRRRRRRRRRRRRRRRRRILLLLIRRRRRRRRILIIIIIIIRRRRLRRRRRRILLLLLRRRRRRLLIRRRRRRRRLLRRLLLLLLLLLLLLLIIRRRRILLLLLLLLLLLLLLLIIRRRILLLIIRRRRLLIIIIIIRRRRRRRRRRRRRRRILLLLLLRRRRRRRRRRRRRRRLLLLLLLLLLLLIIIRRILIIIIIIIRRRRILLLLLLLLLLIRRRILIRILLIIRLLLLLLLLLLLIIIIIIIIIRRRRRRILLLIRRRRRRRRRLLLLLLLLLRRRRRLLRRLLIRLLRRRLIIIIRLIRRRILIIRILLLLIIIIIIIIRRRRRRRRLIIIRRRRLLLLLLLLLIIIRRRILRRRLLLLIIIIIRRRRRRRLLLRILLLLLLLLLLLLLLLLLLLLLLLLLLLIIIRRRLLLLLRRRRRRRRRRRRRRRRLLLLRILLLLLIIIRRLLLLLLLLIRRRRRLLLLRRILLLLLLRRRRRRILLIRRRRRRRRRRRLLIIIIIRRRLLLLLLLLLLLLIIIIRRRILLLLLRLLLLRRRRRRRLLLLLLLLLLLLLLLLIRRLLIRRRRRRRRRRRRRRRILLLLRILLRRRRRRRRRILLLLLLIIRILLLLLLLLIIIIIIIIRLLLLLLLLLLLLLIIIIIRILRRRRRRRRRRRRRRRRILIIRRRLLLLLLLRRRRLIIIIRRRRILLLLLIRLLI")
//Test.assertEquals(dominoesFall("LIIILRIIIIRRLIRRIILRLILLIRIIIILRIIRRLILRRIIILLIRLRIRIIIILIRLIIILRIIIILIRIIIIRIRIIRIIIIILRIIIIIIIIIIRIIIIILIRILIRIRILIIIIIIILRIIIILRIILIRLRIIILLIIILIIRLIIIIIIIRILLIRLIIIIIIIILRILIIRLLIIIIRLIRIIILRLRLRIIIIIIIIIIIIIIIIIIIRIIIILIIRIIIIIIIRLLIILLLLIIIRIILIILLLIILIIIRRIILILIRRIRIIRIIIRIIILLRRIIIIIIRRIIILIIILRIIILIIIIRIIILIRIILRIIIIIIRIIIRLIRLIIIILLRRLLIIIIILILLRLLIIIIIRIIIRIIIIIRIIIILIILIIIIIILIIILRIRIIIIIIIILIIIRIILRIILRIRIRIIIIIIIIRLIRIIIIRIRILIIIIIILILIIIIIIIIIIIIRLIRRIIRIRIRIIIIILLIIIIIIIIRIIRIRILIIRIIIRIRIIRLIIRIRILIIILIILIIIIIIILLIIILIIIILIIIIIIRLIIIIRILIIIIILIIIIIIIIRIIRIIIILLIIIIIIIIIIIIILIIIIIILIIIRIIIIRIILLIRIRIIIIIRIILIIIIRIILIRIILLIRIRIIIIILRIIIRIRRIIILIIRRRIIIRLIIILIILILIIIIILIRLILRIIRIRIIILIIIIIRIIRIRIIIILLIIILIIIRIIIIRILIIIIIIIIILIIIIIIILIIIRRIIRIIIRIRLIILILRIILRIRILIIRIRIIRRILIRIIIRILLRIIIILRIIILRLILIIIRIRRLIIIIIIRRILIIIIIIIIRILIIIRRLIIIIIIIIILIILIIIIIIIIIIIILIIILLIIRIRIILLRILRIIRIRIILIIIIIIIIIIRIILRIIIIRIIIIRIIIRIIRIILLIIIIIILIIIIRIILLIRILLLIIIIIIIIILIIIIIIRIIILIIILIIIIIRIIIIIRIRIIRIILILIIIRRIIIRILIRILIRRIRRIIIIRIRLIILLIIIRRRIILIIIILIIIIIIIIIRLIIIIRIIIIRRIIIILIILLIIIIIIIIIIILIIRLIIIIRIIIIIIRIRIIIRIRIIIIIRIIILRIIIIIIILILIIIILILIIRIIIIRIIRIIRLRIIIIIILRIRLILILIIIILLRRIILIIILIRRRIIIILRIILILLLIIIILIRIIRRIIIRIRIIIRLILIRLRIIRILIRIIRIRRILRLIILIIIIIRRLLRIIIIIRIRIIIIRIIRRRRILIRLIIIRIIILIIIIIIRILRIIIRRRIIIRRIIIIILLIIILIIILIILIIIIIIIIIIIILIIIIRIIILLIIIIIIIRLIIIRIILIRIRLILRIIRIRIIIIRIIRRIIIIRIIILRLILIIIIIIILIIIIIIRILLLIRIRLIIIILIIRILILIIIIIIIIIIILLILRRILIIIRRIIIIIILILIIIILRIRLLIIIIILIIIIIIIIILLLLIRRIIRRIRLIIIILIRIILRIIIRIIIIRLILIILIIIILILIIIIIIIRLLLIIIRLIIILLLIIIIIIIIIIIRLLIRIRIIIIIIIIIRILIILRIRIIILRIIIIILIIIRRIILIIIILIILIIIIIILIRIRIILLIIIIIILLLIIIIRIIILLIIIIRRRILILIRIIILIIIIRLIIIILILLILIIIIRLIIIIIIIRLLLLRIIRLLIIIILIIIIIRIRLILRIIIRIIIIIIIIIIIILLILIIIIIIIIIIILIIIIIIRRIIIIIILIIIIIIRIIIRRIIRIIIIIIIIILIRIILILLLIIIIIILIIIIIILIIIRIIILLILRIILIIIIIRILIIILIIILLIIIIRIRIIRIIIRLRIRRIIIILIIIRIILIIRRILILIRLRLIILIIIRRLILRIILIIILRIIRRILLRIIRLILIIIIILILRIIIILRIIIRRIIIRIIILIIIIIILLIILR"), "LLLLLRRRRRRRLIRRRLLRLLLLIRRRLLLRRRRRLLLRRRILLLIRLRRRRRLLLIRLLLLLRRRLLLIRRRRRRRRRRRRRILLLRRRRRRRRRRRRRRILLLIRILIRRRILLLLLLLLLRRRLLLRRLLIRLRRILLLLLLLIIRLIIIIIIIRILLIRLLLLLLLLLLRILIIRLLIIIIRLIRRILLRLRLRRRRRRRRRRRRRRRRRRRRRRRLLLIIRRRRRRRRRLLLLLLLLIIIRRLLLLLLLLLLIIIRRRLLLLIRRRRRRRRRRRRILLLRRRRRRRRRRRILLLLLLRRILLIIIIRRILLIRRLLRRRRRRRRRRRRLIRLLLLLLLRRLLLLLLLLLLLRLLIIIIIRRRRRRRRRRRRRLLLLLLLLLLLLLLLLLRRRRRRRLLLLLIIIRRLLRRLLRRRRRRRRRRRRRRLIRRRRRRRRILLLLLLLLLLIIIIIIIIIIIIRLIRRRRRRRRRRRILLLLIIIIIIIIRRRRRRILIIRRRRRRRRRRLIIRRRILLLLLLLLLLLLLLLLLLLLLLLLLLIIIIIIRLIIIIRILLLLLLLIIIIIIIIRRRRRRLLLLLLLLLLLLLLLLLLLLLLLLLIIIRRRRRRRLLLIRRRRRRRRRRLLIIIIRRLLIRRLLLIRRRRRILLLRRRRRRRRRILLIIRRRRRRRLLLLLLLLLLLLLLLLIRLLLRRRRRRRILLIIIIIRRRRRRRRLLLLLLLLIIIRRRRRRILLLLLLLLLLLLLLLLLLLIIIRRRRRRRRRRRLLLLLLRRLLRRRILIIRRRRRRRILIRRRRRILLRRRLLLRRILLRLLLIIIRRRRLIIIIIIRRILIIIIIIIIRILIIIRRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIRRRRLLLRILRRRRRRRLLIIIIIIIIIIRRLLRRRRRRRRRRRRRRRRRRRLLLLLLLLLLIIIIRRLLLIRILLLLLLLLLLLLLIIIIIIRRILLLLLLIIIIIRRRRRRRRRRRRRLLLLIIIRRRRRRILIRILIRRRRRRRRRRRRLLLLLIIIRRRRLLLLLLLIIIIIIIIIRLIIIIRRRRRRRRRLLLLLLLLLLLLLLLLLLLIIRLIIIIRRRRRRRRRRRRRRRRRRRRRRRILLRRRRILLLLLLLLLLLLLIIRRRRRRRRRRRRLRRRRLLLLRRRLLLLLLLLLLLRRRLLLLLLIRRRRRLLLRRLLLLLLLLLLLIRRRRRRRRRRRRRRRLLLIRLRRRRILIRRRRRRRILRLLLLIIIIIRRLLRRRRRRRRRRRRRRRRRRRRILIRLIIIRRILLIIIIIIRILRRRRRRRRRRRRRRILLLLLLLLLLLLLLLLLLLLLLLLLLLLIIIIRRILLLIIIIIIIRLIIIRRLLIRRRLLLRRRRRRRRRRRRRRRRRRRRRILLRLLLLLLLLLLLIIIIIIRILLLIRRRLLLLLLIIRILLLLLLLLLLLLLLLLLLRRILIIIRRRRRLLLLLLLLLLLRRRLLLLLLLLLLLLLLLLLLLLLIRRRRRRRRLLLLLLIRRLLRRRRRRRRRRLLLLLLLLLLLLLIIIIIIIRLLLIIIRLLLLLLLIIIIIIIIIIIRLLIRRRRRRRRRRRRRILLLLRRRRILLRRRILLLIIIRRRLLLLLLLLLLLLLLLLLIRRRRLLLLLLLLLLLLIIIIRRILLLIIIIRRRILLLIRRILLIIIIRLLLLLLLLLLLIIIIRLIIIIIIIRLLLLRRRRLLLLLLLIIIIIRRRLLLRRRRRRRRRRRLLLLLLLLLLLLLLLLLLLLLLIIIIIIRRRRRLLLLIIIIIIRRRRRRRRRRRRRILLLLLIRRLLLLLLLLLLLLLLLLLLLLIIIRRILLLLLRRLLIIIIIRILLLLLLLLLLIIIIRRRRRRRRRRLRRRRRRLLLIIIRRLLIIRRILLLIRLRLLLLIIIRRLLLRRLLLLLLRRRRRILLRRRRLLLLLLLLLLLRRRLLLRRRRRRRRRRRILLLLLLLLLLLLLR")

