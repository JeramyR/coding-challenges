

//title: Maximum Occurrence

//tags: algorithms,arrays,logic,sorting

//url: https://edabit.com/challenge/yjjwKXPKqALuZe8jE

//Description:
//Given a string text. Write a function that returns the character with the highest frequency. If more than 1 character has the same highest frequency, return all those characters as an array. If there is no repetition in characters, return "No Repetition".
//Examples
//maxOccur("Computer Science") ➞ ['e']
//
//maxOccur("Edabit") ➞ "No Repetition"
//
//maxOccur("system admin") ➞ ['m', 's']
//
//maxOccur("the quick brown fox jumps over the lazy dog") ➞ [' ']
//Notes
//Try to make use of the concept used in counting sort.

//code area
///////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////

//tests:

//Test.assertSimilar(maxOccur("Computer Science"), ['e'])
//Test.assertSimilar(maxOccur("Edabit"), "No Repetition")
//Test.assertSimilar(maxOccur("system admin"), ['m', 's'])
//Test.assertSimilar(maxOccur("the quick brown fox jumps over the lazy dog"), [' '])
//Test.assertSimilar(maxOccur("Computer ScienceComputer ScienceComputer ScienceComputer ScienceComputer ScienceComputer ScienceComputer ScienceComputer ScienceComputer Science"), ['e'])
//Test.assertSimilar(maxOccur("edabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearch"), ['e'])
//Test.assertSimilar(maxOccur("thequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydog"), ['o'])
//Test.assertSimilar(maxOccur("thequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydogthequickbrownfoxjumpsoverthelazydog"), ['o'])
//Test.assertSimilar(maxOccur("edabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearchedabitisawesomequickcountingmergebubbleinsertionselctionshellsortingbinarylinearsearch"), ['e'])
//Test.assertSimilar(maxOccur("gedpeilckbponlhjfoakojkbkqgmlidojdfpiklcmceimijkcfgaagkedcqqlkbhligdgdkinmgoqbohlblkiboeafacphihmhgnpqpefgqoqqfgmnphoifbqkiqhobimjbidkgppghmgfhonidgjlpainhaefqlgljgqfehqdojeakfagqenjmnaanbeiipffbflqbhaqdoanicmccpbohfjifoajcbbjgklecjkffcnplfkplqaopaldjmjqpqjobldkclcfobqdflkfeacdmpoffhhecilgeqbbofffkkpidoachmnipmkdfmfkibhndpnidbpieneaapfjknnhmboonahlabhcblcbibeogepogkjonommonandpfqqfgkjacbmincqabeqlnjdaibgmihgdfahkmhncafpqjmabqpqaoeapalldfaddkjjmapmpqdfagbealmaeoooaeebkmldangbcqfnekbamqlmmbkfkgmijbfpddoobnhlacqmlkbhgjffhjdllgiecnggqlcqcpojncambneaalmddpjbjbhclnfplelcfmjqofgkqdgncbgdnckhcgidqfingkmcfnfaieonmkqjclbedqemolondqklmjmpjimqlkpgfhadhcmbbamplkbnblghijomepenimjipefaoadqgdfbdebgihofdkbealnkcjkqjpnjqjidqbllellnjqjglicgnkpemplfbcenmikalfalafmgbqifpcpgaiipaojboobidbkdfgqcglnjocgacdiligfgkdkjqfbhafchodmnefpflejaemkocphccldldnkhpahncqddqqakkemgqgqlopqiinqfmpneeophcpqginqnkjlngndongdkdqmdglkmbioicebkqfkncmkfakjmmilbbpclqnnkqcilfljjonpefmhenpiqidlcojnqbhcmijlpjeikejqnbqojoopdgfeihombjbnmibhhodmqcbfmneqkkkgnnqnpbgobaahlbkpnkieqpohngeqiimoqkebaiioaqdaqeemlaaobchnjoqojfgjacmkoneljncdifnmbmonolhbobbekmhkhqbbijjeimqninlpjnoicnhhnanpmqobkjbidokcpceealmqjceodfjepnfbfjpplmoofhofphlcjggnokgdbhhmhfbiiciqgqicoincnfbmkbpnqnlgdkknenpeejnnineeananofffmbmpqafdbddogblacchmmiellagacnicckocjmefihmhhahmkklapblcjqjjkjcnkqpiideblobeeopemljkiplkfelibjkilgfbjdaphlnlckcohjgcoaglfgcadoiipeqaeghceelbnjjqohqkcghmjqqfjjkmeqofdqjnjokkgcigpqkhbjeedipbbaekljhjakpgckepjlfeipagibhdknglnapkedkaljcgpeefmimeecfbgjpojepcpmnpcdnjgphmiogjapqhhgmfbecbmnffdoomdcoiamdejjiofqcqngbedohealndhejbkhpaeohkdjmnooefpeehgaddopkebliiqfmolmcepqhbkdjmihalmpeagfgemjklihlqloagpmponplidplgmabnebcpibjmjipjqcbppfaibmeldmfholijnpplialnkahmjblflfijkdbdiqnipfjfbhdgmlfpimpgallgkelhnkbepohdjamlklnkdnakghlenaaegojijlonnjlplkfmgifecigddqmimmjelnfjicjiqjcjfmajbmhgqjhnegnoiaebqkefjcobdjhlieipqbnmjkodmjqhpoljkmhbcenipnpjgdpjngjdaganqfqpbmfbcckneemfelhijihmdonioblediffncnfhkpqnckkkbhbqelfgdgpnaqlibklhgqqjiqjpiqhcikmjacilllhlbkkdqolefpceandqmdgkcdnjofjeghjanaqpmekdejjihlbojbgepddeljkpcekdnogcioniofqicdndbcijdmdmiddogcplejnbbjemcbfljfeqeqfmklbgppkkbmcjhnnokdckdqlbkfqjddbqphpblgoofhpbkpjohnlodkgopdlgfjmaddnfjlickjqdnboebhebmjahkijopakceoehkpoblhhndlbheifjdbaedaefbegaaiaqqhdjjkgkcnhmblnfmqdhopojqfpeoccpinapcnnnlqilkhdehcefhnlcagqdconnngfdkiggnninkcgqpdpimijkdhmpjmbagnbagplcanmdlglqmfglafnciekedlgghhnepbannkenmjkcddijgcfmhpjphlhgaiciinlhmdqqcfqeindgckcphllinandqbooeqqeeghnkijfjdbdilodjokjompakfmoqonhfedcoqmaqddfomnnhggibqgcjgoinjjnmhbflkepacibpidnkolphnqkboohkbmqcokmqqdjlkdpcnhgnaaafkledkbennaemqomnqakjkcqfbkkjfbcpnlcpgipbbdelnmaqqqmemfdlcjqcpkcomgjoimmfqoaeagieegnngbngpdldgbbdimjdibgagbajkbgaqfnkmkplidlfqlceccmcplenodbefqemoocomgfklhekqjlllcooejpijpmagalmefkpnpieahjjiqfkadjmiackjognnfafpdmgqedcnaapdnbkmqonnnbqdnbjpjjacnajfhigifnhopkahfojqkfeoiglkalipcndddeqlemqefdmchfkehnghmqlkkfanedebiqmhdknonaaaglfgqilncdpcodnqggdfibjqkacpoqcjiofflndqqigljqcmbjankjmpoqjjepehcflpogomfnpmqhqoodoohkbkepjdcnbmbacdqmqpcqqkiaejlkpfkjckkoboodgobddlcfjcjoekhbhpapjlkkojqdjqhqjipacpijjpfljhqmkfpeicgpbomndmfqnjaoalbjihgmimijolbleejkiolliimhacjdgpoidbbiihdhjjfhdpopjecgbpdagieephngeeadqgoijjmjphajilqfdlpqomngpeplffqapmmopifqhihgdpmqhobeibfmphamcmignhpapmdnkgapbhelgnkqfmqqgjacpbmkgofbfjohlmmelmnjpnglheaajhckfinbbhnggqpencidkoaepmglhdenhcmqbkfnndbgqmgfehnlqkifhpmpjfakgonfgjqnjifhmfdneacamknhpqcdjnfkiplhjqnkckqpkknjboaeqpdebhmfbkpcaamojehcqilpoeocajgoeqbgmkclmclpnqddmcqkppnqhglmcnlkfobmajgekhmbimnbcnlqohdceocfiblbfcajbqlpihmiabmednnegiccbggekeiolmedkfdadidadiaejpcmmedehhcdeecejknogdbbnqegphpgmjmqnjkkkccjaebhjalbhnqjdialioljmmkailfpidfncepbqihqnfimcebdlldjijqnolkhghlmpmdhglnckbnhgqmnjnakmlpmdnedebacloaabnnohaalnmcoppglqncaqcjjgcokjcpbbgonnihfdjepabaeniphhmpcljnaadbcnpdqbgnabangijkqqhokbpppihpaqcqlnbjjqlklpqlkpemnhafgdecgfodqhjmkgpjqbkkpifqfdfldbijanocjlnmagoqgehecamdjkfbcddhgcqcgqlenjghkbqlnieknfgidefkiilqfkhhcoofgngabdqonphigcomgbadiiplbdcbmmdgqaeqmknomdcmegbdkhlfocenjnngalccadoqfmmohldpdfhciljfjedenmimpegajhlqllhcfjkodonbhpaddbloilhojfchhjokjcjngclpgdkbmkjdmekmiieipadjecdkqgllofmnolgmkkqiblqfgkonaljpadgdddipijqdmkcoibfcmnojhjkemamhkohfimpnhhcoebckncpmnklcnkeabngoljegpplabjcpbpdolbjglhnjblifjockmqpdindipcqafqdelfpjbclkakcppcqodkmhlfafelfpjnfqlkhbecapbbmjmpahaeodceqaimmglnbqhlfbgoalnjhjmkbgfnqjmfogijldbiboccgpgedhhphbblqiloqjnamfenelehhfahqnkdfglfnheidqbjclgnaofgfbfeandnccobgacfqnihpqngmhaojkcdnkkebeqoigjoccadqpaejcqlkigklaohakgmanngfnmjnchbagldgemdolhmikinfmchddepkjjmgipandpoqlcnfjcclqhpajgphhgegdkgemognmhkimjbcngoqbklgfpojdpbneiimkldkmhbjfgdiijhalcbnoebnohkacpccgcekaicaagpeononnfchajenoniqpeipbfadjplehaccqboknjnjjfplbdaongocdlmopibefmcpcddcgfldknfpmhgghfkadlchekcfmckagdmgkhejqdkapaqlijljlflnllcaiegmnjmqhgdepdidhccmipcfidfeigndbkeonakgkoplcqnfbjcdgjqdkoialfiqpgcnhqgaghhpmfpqfmcjbkonedqfqpaflabalhmhfgfeckfpafnlbnkiqoecnkcbdmmciijqjdbbocljqgelgpamdqbnmhbggcfkomhfjanpabckdngiakkdldohmkaoblnppbcboplfhpiiipdfjmcmfgfgqbpomcpmcdohglqemgcncopgkpkncbmjkeebmegbafomnhjfgmkclelahigmljhifmhkgnedcbfnqdbplknkkmhfhboloaigjgcggnoqoopmlfndegoagqemhhqlnfaiepikcqabdnbojpiigiofpgdqlpkhcaglqdlfloiopkijqejkehehgpelkcepnddqaqimjneckbqpediofkbfhjhglqfibmkfncqncieoiabimnbqnbmaqiiepejmggbojinjghhfccpbqkkdljphoabafmohgqqipmhnmjnimkeflhjeankolbihdfbmqfjqqqjqjbjbnfpkijaclmdqngqbplkpkebqopqdmpmmehbcadlpidbpqhcnqlhmdcgeapbgfdndqdeoqccqifhaneegklhngenoehfblmqajcfgldhjekocccndclaccqbpbbfpdelodjmfgdpocdffgleqbjoknlfbnomalaphadbndkbpajdfcekggcqdoqgnlpqdjaeijeiffkeijhcgnnqcemjoonfllhpaipedkoeijkaiknohhkcmdhglfiqdqpannbepdmdlaamhglqcqqfoikboqllccfeohccfpndpkeieofpdgkiceamfqlfmjbjodiefeblbjaecdmpfkndmqpolkaaeiolfhbdpqmngdmomnkjbeokpebglllnoijlmlhmocahabncjaoljamnkhjkhkbecljdkbgdbdkdagbknonnpgdfgcceiqgejclcedkmjpjabfmibcifodhlpmgmlmbqlchbnqmlhnohljnphnilopimpnfifanlickchkecoenkmpoeahmgoiheoakodnqcpmfqqhhepijqqppplpmnjjkpokhnmkdhnjoiebjomniiakqldegqhidjajcnbeinlpmgkdlmohofngppekmklgejiggonqdolaapqmmpdpdccopofpjgjiahkfnqbfchahhmlqokaklqqpelkemljcenihkqddjmnpknogafcfebdkgcdajljnlfgpgmmldldbelajjknmpakpbcilnngpgfmmhjcojoadclqdojekcmaigkpfqjepneeillojajhjfhnokqbngmnaaelllgqnfeendeceekgbqqmlipgiimqimmgbnofonmmpddnnjiqigbbpnicnpkqhgpablfppfllpahoonejbebqbjeheheqoadaiclpqkkkncbofefaieebodcfkikefjjoahmdancidlnapohbjafdmmfagfljjaoqconmmakgccgeoedlkcbinjdmlejhpjflocekbhqdeaijjnpifkephgbmcbmkpejgjafbmiilbnpjdcjmqqhhckahakoggflioebhmdhcompelmjacddgqecpeejeoipigfjdmhgbqpekjefgmehaejfcpnihobjlnebpmpiccnnoejpolqgkahmlnjkfdnodpdhdnmkgeliaknlqlliodhgbllokdopoddbigmeedqhqedjgoblgapciokndleiljifecmofeocnnaplpgbggeohjdhlholhecqacimkmjglcmokfjcpkclkfdpeabafniqmkaenkdqkppjegckcemaohlgkicgpabmpacjlnamlgnfqkfnigfhipmobgqiiglceojadolamkieooochnpinbainjcgdqphfqkkchjpmplklekdgcfcnnepklbjbdjjamjdikalpadkjipdjjeqfkhkiaaefghkoeccnjnakjlfhlmjedojqmjppgaadijfihfhkchjqdqomfolcnklpmndbiphmnompjpnjgqlqedhjqlojpdkakgmogngndmpfmockbbjhbhpnppqqoeboofmhmpbbkqjffoeomlfpggdpngnmcqhggdakpgemhbqgeiigjogqgfipfponpiljofelmedmjjjhhghhaiiklkkhnqnmomnfknlbofjqddjhflkcbabckkooljeilmgfjlbbncdqiggfmhmegmjnmmaibkcqciijgadjbpgkcgeonmmkdbebkhqdfjknpndqqddiceqfmjcodjmeojdehejaklpmmhkkajeaplcfmbiggagcchbfaacegkkeopiqpgldklnbdjgiakqkidihnefffopdopqamcnfqicpmqibhoqgnmlfmlqqjifdckhpnbfjqbnhcflbiqkecnncifkefqhebeiechpgjcimlmgbimqdfincaglbqeheeaiqndfoppenfdelmqoiadhamaqampbmjqlmilqkcijoemphqjmagcqpmhfdgbhalagbqjedjfcaqoennpbgneocjcfliehhkqeambclfadgoiehhphekcdbnagmgflpebikhmcefpbmoahfkqkngeddnqkmekmgifdoeobdnpplqnncikfebdgibhdlpklpbqfgeidjkecgallllhlgbjhqkceifidamqfjenoeiemjdqbbpqpmqpqqbepmbblfjqghpbnhfofnplepobopbaqaqlbiqdopkaohfgqndmlefnkojllpknaibcfbjdhhjlmeipaoqgalbngqqqclqdhjadqmblflqdnhgqeechamjhabfihqqpjakfqkdebmmmhodfjhoijampqiilhaokajkgffkbnmpdqbjqkikkdeinegembpnjqmhqfmdbnemcnapgdhhmcfboidbleajmcpqgjfgkpmmqhkckefjajbnanlkqhlhbnckmbmflkhclhgmfcloojdjolmladbelidcofmeiflklfgbdiigfbfealhdhqbiphjniicqclimjqcdeogmhmlmambgphnpdkdciqpcnalngigdgaahqkqbdcajndaeaqjcanfoqdmbljminjafhkjhfdfncqhoidnpkiomqfidjmgmnoiccjkhlocdqbpqlmgcfgmajpdejbbaemiakhobjmeafnjleoocmipjfhqgqqgfkdaqifklnaaqikpcifnfepqeaqmhlfhglglglkqbdbadpkegqbkdnlmmbpbqnmjecnmbembiqjmhfbdakbmanmhhfijcehdckebnlhgpchapojjgcbmleqlcaiqhpijbfaiqhbmfhqfdemeamqihfojhcobqjgljbldldnbhagpqoeqdkclmcieghocpjoqlqagdajjqhndjgjfinfhcenqqaepogaliijcnmmoelkaihjdkbcipfikhcqjkbedifbjbggmjncnlcodbelekdceillhimjqlfmmlekcnpmgjjmmmcnaanmccfofdgpiincdgnbonghpnajlonkqghkenehfbmcklpgedogejkpjoafbmdkofgehhbpphkcghbheocopkgfchggfhcfdgjdkgekeapejddjoikgandljjnmqjihpfchalahlilmpbfbmopflgjfnmkaibellnlkeeplieeeioiqaibfpcihdjmifipajmdpjccgecjmaohenoobaacndmbjgdbhdqmbfbcmakfopmaqpjdcnbnlbfeaifkkqmkkohpdehjhgnlomqqkddpnclfihjjnnpjiepjinlgfibikdjcjnkchehlnmldkhkhglaickiiebkqbknecnblnbiciagdiqdidjfqaajnkcmcpkbdoikqflilkddqdbcdfollnhlodljbeiglgjnfinhiecloclcggjbghfmqgnmiqbeoqqfjldphndqkooeeajnknqakikekgklggaimniqgjcpohkmeepagepigmcpghgmhdggdbolnidebgajdibcalphcaiqacnkgalhlbojabbneggnagaepmicfflanaibdfppneklcllclmnllhdnmhjegjjnlqlihhcpjchlhmhgnbcdedjbdlmmfjnhkklihbdaehabpceliieekhhoghfjgdfcbiljcdhhijleeqkhggqaelcfapecagohppmiklldglopqadklhdoaidaqhjejjfqfkipbmfmcpajocdiqhkgdncgongqckngdjmglhelkikkfojemfkapkiqkljabnmihoaonpkqbilcmkafinhibkljljddakebbqcbkebkgdodojnmoaihqoinfipeppgglbloaaaeldfhngccjcldplbcjcbdiigkoqlhkeilemhbkodqjnimandahggjqhdblippdhkhaenikcnjbgigcokhepoefdjpnkbjppqnhflijpkpmnjhdigbcpqhmlqbdodbcipqhchqaqkdabckfqajjaoahabomlcmdbmbmbbfqgiqfmdqmecndjpciohdaenffijjqpfqbgiobapnaeomlcifghcilepqgaaqdhjfenegqlgohcppmhelplhlqdqaqpdbhpcccqkikcgmmddlipjnedljkpmpmnpjmnjnqjoegeldgocqagianebjmnqaliapadpbbjneeabjmqjqgoeihlnaqdmibgeeikegehogoqoebblbmmdagnfaghilhlkjbgjjdoqcdkgcljjhdndcbaibjfagmnhkmolanqahjckolnfjkemokmpeqbbgccbcjiqiemmcklobidimiphlqcknnbhlkebqcplnpqqicednfjpnjqphjlfoqkopqgnpfqgoimiagkbiqqcegflkicjcpoqkemllcfkdkljlinepompmegacfgqmbaigafjkljadhecddbnapbhpijlojipdahbfllfamlenhfdbhncdneenmgfagllgebleqfjqdkepogeoodcfnjbfhccpflbgpkiplghagqpemdniojdenjoqmhjopckhidiganiphngeefkihhgbmomedbpphmlhdndflojebiqmgfkibdhijhdgiibeffononbecipfoiidgjbociclkpgiekppfkgkaqpgggjdfpeqipqdjoaqphmhnqmpabpodmifiqnkoelmbhqmbhdcpjiijqjngppacgnopclbqmfcnmcqqpboghqplqhqchnfhggfghihefoaejbeonegojkkobbcnknpmehhbdmglflepfkfkgbmbbnnkcaopbqhnffqbliojgqbjhofijnoqjjpakjmchbmhqdbaloelhilnkcolqhmdppfkckjpjbmnolkbcqbqncpkjnfkbaemqqdhbqpoeqfnmcglpbnbkjbcncdplfhafqqaffenbhegkhamghqanemkjqambneihabpqgpphocoljdecllbkgqnpqajhnhoafmlnldkfhahedqpbebgbmeiidelmbcboobacgadjnbofqigbljfkhnhchhopkahgdhqbangjodlecplhcbollgdqqqeiajpgphemcnnahpdkgdilfogedkpjefkbocbmlbcfmofdfehhhebqmjccflmjgqmhakidohhaagknabkichkfgbqkjhpoilnieqkhkcfpegdliclccdholhfglqqiabfmmpfclgmqmdikeqedchgmgeiefpenkjjobhlndaionoepdnkbnnbfnolklbfbikdnobjkihjqdgejpigcoannaomdpgglofgpmfnigalcgkmjmogfgdimlbicmhkoiodklkbkekoiaapalojojagphfqhofinhhqdlpbocpfiamhnjdjhhdioqmbhbpmaehjeahkehqqkfpgbkmangbnemappngdggoapakfmolhefpcpooajholjhapaghlgqckinhdeogjiefdfddepifinlgnmboffijkhdhkhkjmhpcakopjacanonjbacannoihnpacgmohopfqkobfjcbgaqjneaomhidiplfbjkepcagokepdepemqfalhqabjkgkineelkifkblolpmjkfaickpjeainmgnnmkpoppfqaobcnknknknaqdkahiqalbbdihjqjhoahlphgqcabgkfoammblnlkipbamoapeldjdnpjheqfgjgdjfncdfgdemfeqdfbikmighchomqlkjoccfpmmepaaondjoqcpdcohlqqjgldddolpaojaodhjiiabqadkpmnfeqmaihhkailkljkhqomejdbnqpehjnibpdbllqplpfikmoggpkdoligeqapegmcqliecldnkdhaoecpkmojbolqolclbqnnnhpknqpbplmggpelmpchanqgadbimmehkiicocobahchhfeddlkdqcpcgdjinllnaoecplhlkijkjihbqonefdlnekgcqeiqgnakgqkoilkopibqhdeckndhkipqkfpedccphdfbikjialhiokiolbdimhonkggojogikcifdnjlpbephonpcamfcbfogoeffpojkjaamqpcqphkpjphilchbpjfkaooeqgobcqcqmihbifooqjifmpiekhcojdafcfnpdpaifkcgqbbomjocpkcgqjkeibiioodebnqeffkdqnelpmkmbimiohfgbohpenopjbbbjchjjqekffmpceepapgffqoiknjqaejaimohaahpghpmecholaqakiijkkkcopiopgimqqjgnqeqoolbhbgndonqobjodekbmggeochkfkqmnchamhbognlnfbgehchgbpbkhlcafdqgibblqnmkqqhoqhbghejndneicebgcqpbpjajboacmbqlmnpgjnhheaogldfcckmlafkmacagmlnhockqnihplqddoofiqiomdopiiqikmmmeiieefofegmnmildmniikhqkcgenldadnnefhlkcenghhdahqldbfpbogdojemlkadqqnqjlbiqgldlembdpagiqbabhqqkhfbcacknqndacobjnlcflnaimogqgphmmplfqhqopjnknqgeqiafjhdamniaqpkikqkpfonqmglfahbocjikacnclgflcnehfgijpoiigealeqkkejfgbhoahjqachfglblbndlcefjqkqpnhpmjjlkmpddfaedjbkaoiofofgblhhahdehincfgkaaqlbeibaaqhablbnqpdpipfqcpdokoamcocpnffbqplqnfljqbggbqqfbhphcdephqqibjqmdimeqajgikmafkfblfkdcpgfjkkdqgfejklgfqeeifgaldjhppmjqahmodpakibpcgjkohnfelfdlmgccdlafapgagalekenpapmfegngehlpomqknjjebemflfbmngjilejbqhoghndejhcodpdaelhapkkcnakblabcmoejmaqbomadppfedaqfljefiikfhecqpjhcgjljcbphiefjkoneoaeqfknkjenhkaimbeakcklddocbmhbkemjjkoqicleeckeodjfooiajinqbfplicmdbenjedneeqnmlqjqgoegmidoqefjmhacijcjahqkqinjdnolfiadkgjaqneqgbpkccpkoqackplkfomopidhffjffmfjplkaedkllmlcponmdihnalppbiqpgjohjifkbilemmidelfgmdjedapjmgibqjdfdhnaqiajjacdlnpgeagedeffndocacbbqlhoinjdicolpiaikjokldmpkofkigknppofnkkepopncnfaabcleicoccefamniognmajimbqnqmnmpipepncmokndnpmccjbqglpqnjfpjlgfjokomdqkcfqcmjkehqccqibfcbhehebkhkmmcokkghpkndjkbhljeemhngjaojmpnefplhlniklckablgqjaognaqhcdfcdlggpfhqnhlfdagaljeapgafonhmhfbmfenlpnigmloldfpkgleoajhbijaopaeaqpejdfajfoppeeekkpacmoakphmpaaoknbhdlgaghnjohlihciqfcoqdebhiaghepjffpjmbdmdlokeadnojhmmpgqpdloiapgnkikfqokdjnlpbflfmiojnkqdjmnekdccffffombnikaafiollobggjefoobmnimmbdojkajnpiodhbagjqgifcbkajgmgkcceefbojolibodecehclkekmoqqjpnmngpicdjgeqmbgmjaqkhliibqlkihbkimhfjeebpndlfqfkijimqndbcnocjqbknfanjbmnccbllpmhhnqfaopaacfjmagpeheodqjidakpbijngkjjqcnbmkgnpgiamgkmhiomelafqbmhldqgicendddonqqfelnpqfedghbbkjmnilnjmpjifbekbqbigbqimgcidbokbhncogqiahngpjbhbcdfhkqdbopaanqnbbfalncgmheqbidojloifpmkkechdaikmniccpfenjleagnjnaiahjgckhdijhpnmhqeagfcapgpcdlgiglfaegacefbmningchoefapembjnjhanobbhiachbblocnlmcaebajapiniidhhemjdnimplcplefgpnhegofnfkbooecjgfmqgknmklfddhpjnagobeqolbkfnagiqgemamnjoqjpkkhngdmjckqkenlqnalpjoombgfkkhlqfpplqhnnbaifeinkfaokgkjojemekgnhcffnlmckkeffldqagfkbfdfqlikmfknlpfnlpngjjkjmkkgjpqamjbfkglkqclfgnggopkjnbkbfpqqlckeigamqlqociiqbocfbjkgkabbcnfqlbgimjoecidpobomhaagioqbgnalmpepmdkpqhgihdalbbebbjbbgepjomlbqnnqejdaeedcchlgfcleclgffegiifhbcecamlolgqfilqedmghdkiejahdaomqkncijhkjlndlmfadannmefebqhmdjbjfqfphfhlbaacciollifjbigedkbfacbmiqogboqapimcqamaiofgfokhbnjgbobfghlfbjmkcmpphbpfagdqkbhefalqdpcmcmqkogloggpcocmpjfajqjkaodojiplikkpkdfbkghagpknbafjojgnegqcpjjenkiffmbpcdqddchoiilfapghfnpelebaidbjhqaaqbgbmfgpqeqdmjmnjjfifdfgkoklbeacbfidhqhqldlqkqmnkaggbldbdpeihqdmajoqeqgjeojbhmomhpqomkpoiogqklidkflgfpjbpbdnfjpnaeknqkiqqiflbfqgfhljpefqgclnccgjdiidkmocbkoimikahanoqeadgpgooqikqabdefkmqlfibbadkcjbjlomaoieiqcbbcjhffdijnphenglojamadmccjcfaehhddqmqamlacjgkblmojbmfbaffddcloohegkciqiqjamjaedldifoeehkmclklcihgfkcjenbilfjqmecldiafdqaciihhqldhdolkdlnkciihgdbapdppffhjokbmphjldidkehahkfpiihllpdcaobgppqajjkiddpkniddnmqgbaffpkhqqakeoqcemaaidgdkjcggikqqlgccnhehjmonaqihebdkjbapqhibqkcdipgpcbiqekopdndbqoeglmpoinpnogkhbejgfdhedfhckbkahdnqppoegoaaqjjknggkodpagojepkmdioofqapdkldpakbjifhffnfckebbehekhefiephdoifmkagqeiggnndioiogkmoaqppojkiqhfhfqifjgmkgcgfeeoaacjhiebdlkjgfbbjkdajallgdejpnigjojfaddelnmelbpimoabmqkfejjfpilgpmdjdiifhihgecjqipcmmpoqadjdaencmgmhmfjlgefbgbckhdjphggdopdhqbqqpiqpjjjqanhhaclcbjdiggfgpppmjgahifchkjkneqfhldpmacookceongbolpknlocadidkipodqkoegdkhdjpqmnojlecohblchdebnlfkgcpmjhliekgdcdeqkidoiqcdaqoimdqephlionoackjlaoaniqkpfjeolkdccbjadldfbhgiofqjongojbjekbebgmddeapabmjdfpqemlmidbqapmligijplmkmqnijaimiceakppkjfikakhkebhfnllefaqjmjfngjnogghcnkhkaagqjmbihkbndckalaoqehldiokiqkeijiojfbeflghnodpdlidjjgqjplhcjffambgejmaqmabbdhpkdflkmlkilfjioipbemflqpojqfbopmapeomhjakipgainlqfjhmbmkiicqokhlfpklahndaaagaghfgabjknheedklbqgdklfkahjdkqnlappjnknkcpklnfbqkijqblnkobpgjanphlhjcqmndagjhobnmjhaminngccieghhpbcpcgnnpphllfhiiglefkacpnmloqklhfhhhjqmefjloidncdmfiqkpjcdlbqmojlnblklohembfdekghfddgecbqlnhqciiefgonkbcqjmapbnagnkcmgacocpghlnplbpaclepicingcmepdjoqgjqhimkpjqlqdiaokjkhqgndbqcaqdhhlqgnhghgqffekldhiaafajcanknejbldpnmifdfmkhoqokcihlifqkohjedlgeolcmlqfnkbieomnbqcbgcchfqhglblqcepkcmbcmcggqhjcemdlnbqllebglhfcfhcaqacqfelmngffqlcghaheiimdampdqngcnnjlnhemcoahogbocdgkcbghmjqjgmpfnbephmadkjiclcaihplolofdkkoknkjildnfglfobccpmkpnpkkicdabppninckchmapehlmjniblnjeilmkaceehenllmomjnejeakckjmndamlhfhkbilefplahampnakfmcagnfkaafbhiciadfjlmqqpdfbibmkcchaplfjnqpffcmficjgadkgnbbpanllcoibngijeaoaclldfphlkmjanifojjamidkdgjialfpljbdahoqqaaollmdgpaoggcaemimhelhpdjnniepmedlbefobcoebhjngehqgnecapojkomamqmadnhlgdfinndpqapindkabalamjaambpaofnhiebncamncemhmcodabblfkjgqmhpnebbfgdidmmbciggjoajkncnmnedfeghmhdbclepmpdgkflgiajlahofpmbohhkfqmlhfaifqhqkikqlnghdblgqahgcbqqcqoamqjambdbpbcniqmepgmcnollnlminkmfncjpahkjgbnlmbenahjlmlhdcnkgdpbfgjcmpcpbkpkpfldmoqmfkqlcfkndnhioqlgkanengjdcjhahcpepfbbpeaiangfncnbiiqipjboampejgapjpjbqfgjiaagjfpljmomqclejjmoiiafdomgdffeeacbehhncdidmqjndaflebmdnfpeaooonncebccleedmockfelgl"), ['n'])
//​
//// Suraj Vijay

//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////


//title: Postfix Notation

//tags: data_structures,language_fundamentals,math

//url: https://edabit.com/challenge/JxM8RyFw42TraEyfN

//Description:
//Postfix notation is a mathematical notation in which operators follow their operands. In other words, pfexp1 pfexp2 op, where pfexp1 and pfexp2 are both postfix expressions.
//Some examples:
//2 2 + is the postfix notation of the expression 2 + 2.
//2 3 * 1 - 5 / is the postfix notation of the expression ((2 * 3) - 1) / 5.
//Here you have to compute the result from a postfix expression.
//Examples
//postfix("2 2 +") ➞ 4
//// 2 + 2 = 4
//
//postfix("2 3 * 1 - 5 /") ➞ 1
//// ((2 * 3) - 1) / 5 = (6 - 1) / 5 = 5 / 5 = 1
//Note
//Operators and operands are separated by a space.
//The operators +, -, *, / may be supported.

//code area
///////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////

//tests:

//Test.assertEquals(postfix("2 2 +"), 4, "See example #1")
//Test.assertEquals(postfix("2 3 * 1 - 5 /"), 1, "See example #2")
//Test.assertEquals(postfix("5"), 5)
//Test.assertEquals(postfix("10 10 * 10 /"), 10)
//Test.assertEquals(postfix("5 6 * 2 1 + /"), 10)
//Test.assertEquals(postfix("1 1 + 2 2 + -"), -2)
//Test.assertEquals(postfix("8 4 / 9 * 3 1 * /"), 6)

//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////
//////////////////////////////////////////////////


//title: Word Nests (Part 2)

//tags: conditions,language_fundamentals,regex,strings

//url: https://edabit.com/challenge/nm5jyuTK9KdgtYEjJ

//Description:
//A word nest is created by taking a starting word, and generating a new string by placing the word inside itself. This process is then repeated.
//Nesting 3 times with the word "incredible":
//start  = incredible
//first  = incre(incredible)dible
//second = increin(incredible)credibledible
//third  = increinincr(incredible)ediblecredibledible
//The final nest is increinincrincredibleediblecredibledible (depth = 3)
//Valid word nests can always be collapsed to show the starting word, by reversing the process above:
//word = "incredible"
//nest = "increinincrincredibleediblecredibledible"
//
//Steps:
//=> "increinincrincredibleediblecredibledible"   # starting nest
//=> "increinincr(incredible)ediblecredibledible" # find word in nest
//=> "increinincr            ediblecredibledible" # remove word
//=> "increinincrediblecredibledible"             # join remaining halves
//=> "increin(incredible)credibledible"           # find word in nest...
//
//... repeat steps until single word remains
//
//=> "incredible" (return true as "incredible" = word)
//When invalid word nests are collapsed, the starting word isn't found:
//word = "spring"
//nest = "sprspspspringringringg"
//
//Steps:
//=> "sprspspspringringringg"   # starting nest
//=> "sprspsp(spring)ringringg" # find word in nest
//=> "sprspsp        ringringg" # remove word
//=> "sprspspringringg"         # join remaining halves
//=> "sprsp(spring)ringg"       # find word in nest...
//
//... repeat steps until single word remains
//
//=> "sprg" (return false as "sprig" != "spring")
//Given a starting word and a final word nest, return true if the word nest is valid. Return false otherwise.
//Examples
//validWordNest("deep", "deep") ➞ true
//
//validWordNest("novel", "nonnonovnovnovelelelvelovelvel") ➞ true
//
//validWordNest("painter", "ppaintppapaipainterinternteraintererainter") ➞ false
//// Doesn't show starting word after being collapsed.
//
//validWordNest("shape", "sssshapeshapehahapehpeape") ➞ false
//// Word placed outside, not inside itself.
//Notes
//Valid word nests can only be created by repeatedly placing the word inside itself, so at any point when collapsing the nest, there should only be one instance of the word to be found.

//code area
///////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////

//tests:

//Test.assertEquals(validWordNest("redeem", "rederedredrredredrerrrederedeememedeemedeemedeeemeemmedeemeemeemem"), false)
//Test.assertEquals(validWordNest("survey", "sursursurvsurvssurssursusurveyrveyveyurveyveyurveyeyeyveyvey"), true)
//Test.assertEquals(validWordNest("sensation", "sensatissenssensastssenensensasenssensensensationsationsationationtionsationatioionantionensationon"), false)
//Test.assertEquals(validWordNest("feed", "feefeeded"), false)
//Test.assertEquals(validWordNest("station", "ststatstasstatistationontationtionionation"), true)
//Test.assertEquals(validWordNest("quarrel", "quaquarrquarrelrerell"), false)
//Test.assertEquals(validWordNest("broadcast", "broadcbroadcastbroadcastast"), false)
//Test.assertEquals(validWordNest("current", "currccurrcurcurrcucucurrentrrentrrententrententurrentent"), true)
//Test.assertEquals(validWordNest("diet", "diet"), true)
//Test.assertEquals(validWordNest("park", "pppappappapapapapparkarkarkrkrkrkrkkarkrkrarkark"), false)
//Test.assertEquals(validWordNest("undermine", "undermiundermundermiunununderundermineminederminedermineneinene"), true)
//Test.assertEquals(validWordNest("nail", "nannnailnailailil"), false)
//Test.assertEquals(validWordNest("show", "sshssshowhowhowowhow"), true)
//Test.assertEquals(validWordNest("demand", "dedemdeamademademandndndmandnd"), false)
//Test.assertEquals(validWordNest("publicity", "publicppublicityublicityity"), true)
//Test.assertEquals(validWordNest("relief", "rrerelirerreerrereliefliefelielifliefliefefliefelfeief"), false)
//Test.assertEquals(validWordNest("pipe", "ppppppipeipeipeipeipeipe"), true)
//Test.assertEquals(validWordNest("diagram", "diargdiadidiadiagramgramagramgramam"), false)
//Test.assertEquals(validWordNest("salt", "ssaltalt"), true)
//Test.assertEquals(validWordNest("pioneer", "pionpippipioppionpiopipioneeroneerneereerioneerneeroneerioneeroneereer"), true)

